This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/annotations.cds
app/package.json
app/README.md
app/ui5.yaml
app/webapp/Component.js
app/webapp/css/customStyles.css
app/webapp/ext/ChatSidePanelContent.fragment.xml
app/webapp/ext/CustomActions.js
app/webapp/i18n/i18n.properties
app/webapp/index.html
app/webapp/main.js
app/webapp/manifest.json
app/webapp/test/flpSandbox.html
app/webapp/test/integration/FirstJourney.js
app/webapp/test/integration/opaTests.qunit.html
app/webapp/test/integration/opaTests.qunit.js
app/webapp/test/integration/pages/StammtischeList.js
app/webapp/test/integration/pages/StammtischeObjectPage.js
app/webapp/test/integration/pages/TeilnehmerObjectPage.js
app/webapp/test/testsuite.qunit.html
app/webapp/test/testsuite.qunit.js
services.cds
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/annotations.cds">
using StammtischService as service from '../../srv/service';
annotate service.Stammtische with @(
    UI.FieldGroup #GeneratedGroup : {
        $Type : 'UI.FieldGroupType',
        Data : [
            {
                $Type : 'UI.DataField',
                Label : 'thema',
                Value : thema,
            },
            {
                $Type : 'UI.DataField',
                Label : 'datum',
                Value : datum,
            },
            {
                $Type : 'UI.DataField',
                Label : 'ort',
                Value : ort,
            },
            {
                $Type : 'UI.DataField',
                Label : 'notizen',
                Value : notizen,
            },
        ],
    },
    UI.Facets : [
        {
            $Type : 'UI.ReferenceFacet',
            ID : 'GeneratedFacet1',
            Label : 'General Information',
            Target : '@UI.FieldGroup#GeneratedGroup',
        },
    ],
    UI.LineItem : [
        {
            $Type : 'UI.DataField',
            Label : 'thema',
            Value : thema,
        },
        {
            $Type : 'UI.DataField',
            Label : 'datum',
            Value : datum,
        },
        {
            $Type : 'UI.DataField',
            Label : 'ort',
            Value : ort,
        },
        {
            $Type : 'UI.DataField',
            Label : 'notizen',
            Value : notizen,
        },
    ],
);

annotate service.Stammtische with {
    praesentator @Common.ValueList : {
        $Type : 'Common.ValueListType',
        CollectionPath : 'Praesentatoren',
        Parameters : [
            {
                $Type : 'Common.ValueListParameterInOut',
                LocalDataProperty : praesentator_ID,
                ValueListProperty : 'ID',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'name',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'email',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'linkedin',
            },
        ],
    }
};
</file>

<file path="app/package.json">
{
  "name": "app",
  "version": "0.0.1",
  "description": "SAP Stammtisch",
  "keywords": [
    "ui5",
    "openui5",
    "sapui5"
  ],
  "main": "webapp/index.html",
  "dependencies": {},
  "devDependencies": {
    "@ui5/cli": "^3.0.0",
    "@sap/ux-ui5-tooling": "1"
  },
  "scripts": {
    "deploy-config": "npx -p @sap/ux-ui5-tooling fiori add deploy-config cf"
  }
}
</file>

<file path="app/README.md">
## Application Details
|               |
| ------------- |
|**Generation Date and Time**<br>Sun May 18 2025 13:33:29 GMT+0200 (Mitteleuropäische Sommerzeit)|
|**App Generator**<br>SAP Fiori Application Generator|
|**App Generator Version**<br>1.17.5|
|**Generation Platform**<br>CLI|
|**Template Used**<br>List Report Page V4|
|**Service Type**<br>Local Cap|
|**Service URL**<br>http://localhost:4004/service/stammtisch/|
|**Module Name**<br>app|
|**Application Title**<br>Stammtisch Verwaltung|
|**Namespace**<br>sap.stammtisch.ui|
|**UI5 Theme**<br>sap_horizon|
|**UI5 Version**<br>1.136.0|
|**Enable Code Assist Libraries**<br>False|
|**Enable TypeScript**<br>False|
|**Add Eslint configuration**<br>False|
|**Main Entity**<br>Stammtische|
|**Navigation Entity**<br>teilnehmer|

## app

SAP Stammtisch

### Starting the generated app

-   This app has been generated using the SAP Fiori tools - App Generator, as part of the SAP Fiori tools suite.  In order to launch the generated app, simply start your CAP project and navigate to the following location in your browser:

http://localhost:4004/app/webapp/index.html

#### Pre-requisites:

1. Active NodeJS LTS (Long Term Support) version and associated supported NPM version.  (See https://nodejs.org)
</file>

<file path="app/ui5.yaml">
# yaml-language-server: $schema=https://sap.github.io/ui5-tooling/schema/ui5.yaml.json

specVersion: "3.1"
metadata:
  name: sap.stammtisch.ui.app
type: application
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false # If set to true, certificate errors will be ignored. E.g. self-signed certificates will be accepted
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://sapui5.hana.ondemand.com
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
        delay: 300
</file>

<file path="app/webapp/Component.js">
sap.ui.define([
    "sap/fe/core/AppComponent"
    // JSONModel wird nicht mehr hier direkt benötigt, kommt von außen
], function (AppComponent) {
    "use strict";

    return AppComponent.extend("sap.stammtisch.ui.app.Component", {
        metadata: {
            manifest: "json"
        },

        _oChatModelExternal: null,
        _oDynamicSideContentExternal: null,
        _aiSendFunctionFromCustomAction: null, // Für den AI Call aus CustomAction

        init: function () {
            // Standard FE Initialisierung
            AppComponent.prototype.init.apply(this, arguments);
            console.log("Fiori Elements Component 'sap.stammtisch.ui.app' initialized.");
        },

        // Wird von main.js aufgerufen
        setExternalDependencies: function(oChatModel, oDynamicSideContent) {
            this._oChatModelExternal = oChatModel;
            this._oDynamicSideContentExternal = oDynamicSideContent;
        },

        getChatModel: function() {
            return this._oChatModelExternal;
        },

        getDynamicSideContent: function() {
            return this._oDynamicSideContentExternal;
        },

        // Wird von CustomActions.js aufgerufen, um die Sende-Logik zu registrieren
        registerAISendFunction: function(fnSend) {
            this._aiSendFunctionFromCustomAction = fnSend;
        },

        // Wird von main.js (ChatFragmentController) aufgerufen
        invokeAIActionOnCurrentPage: function(sPrompt, oChatModelToUpdate) {
            if (this._aiSendFunctionFromCustomAction) {
                // Ruft die in CustomActions.js definierte Funktion auf,
                // die den korrekten `this`-Kontext (ExtensionAPI) hat.
                this._aiSendFunctionFromCustomAction(sPrompt, oChatModelToUpdate);
            } else {
                console.error("AI Send function from CustomAction not registered on FE component.");
                var aHistory = oChatModelToUpdate.getProperty("/chatHistory");
                aHistory.pop(); // "Thinking..." entfernen
                aHistory.push({ type: "assistant", text: "Error: AI Call handler not registered." });
                oChatModelToUpdate.setProperty("/chatHistory", aHistory);
                oChatModelToUpdate.refresh(true);
                if (window.triggerChatScroll) window.triggerChatScroll();
            }
        }
    });
});
</file>

<file path="app/webapp/css/customStyles.css">
/* SAP Horizon Theme Chat Interface - Vereinfacht */

/* SAP Horizon Design Tokens */
:root {
  /* Primary Colors */
  --sapHorizon-Blue-Primary: #0070F2;
  --sapHorizon-Blue-Secondary: #E7F3FF;
  --sapHorizon-Blue-Accent: #004B9E;
  
  /* Neutral Colors */
  --sapHorizon-Neutral-100: #FFFFFF;
  --sapHorizon-Neutral-200: #F5F6F7;
  --sapHorizon-Neutral-300: #EAECEF;
  --sapHorizon-Neutral-400: #D5D9DD;
  --sapHorizon-Neutral-500: #8396A8;
  --sapHorizon-Neutral-600: #556B82;
  --sapHorizon-Neutral-700: #354A5F;
  --sapHorizon-Neutral-800: #1D2D3E;
  
  /* Semantic Colors */
  --sapHorizon-Success: #30914C;
  --sapHorizon-Warning: #E76B00;
  --sapHorizon-Error: #BB0000;
  --sapHorizon-Information: #0070F2;
  
  /* SAP Horizon Spacing */
  --sapHorizon-Space-Tiny: 0.25rem;
  --sapHorizon-Space-Small: 0.5rem;
  --sapHorizon-Space-Medium: 1rem;
  --sapHorizon-Space-Large: 1.5rem;
  --sapHorizon-Space-XLarge: 2rem;
  
  /* SAP Horizon Typography */
  --sapHorizon-FontFamily: "72", "72full", Arial, Helvetica, sans-serif;
  --sapHorizon-FontSize-Small: 0.75rem;
  --sapHorizon-FontSize-Medium: 0.875rem;
  --sapHorizon-FontSize-Large: 1rem;
  --sapHorizon-FontSize-XLarge: 1.25rem;
  
  /* SAP Horizon Shadows */
  --sapHorizon-Shadow-Level1: 0 0.125rem 0.5rem 0 rgba(29, 45, 62, 0.1);
  --sapHorizon-Shadow-Level2: 0 0.25rem 1rem 0 rgba(29, 45, 62, 0.15);
  --sapHorizon-Shadow-Level3: 0 0.5rem 1.5rem 0 rgba(29, 45, 62, 0.2);
  
  /* SAP Horizon Border Radius */
  --sapHorizon-BorderRadius-Small: 0.25rem;
  --sapHorizon-BorderRadius-Medium: 0.5rem;
  --sapHorizon-BorderRadius-Large: 0.75rem;
}

/* Container Styles */
.modernChatContainer {
  background: var(--sapHorizon-Neutral-200);
  font-family: var(--sapHorizon-FontFamily);
  height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Header Styles */
.modernChatHeader {
  background: var(--sapHorizon-Neutral-100);
  border-bottom: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large) var(--sapHorizon-Space-XLarge);
  box-shadow: var(--sapHorizon-Shadow-Level1);
  position: sticky;
  top: 0;
  z-index: 10;
}

.modernHeaderIcon {
  font-size: 1.5rem;
  color: var(--sapHorizon-Blue-Primary);
}

.modernHeaderTitle {
  font-weight: 600;
  color: var(--sapHorizon-Neutral-800);
  margin: 0;
  line-height: 1.25;
  font-size: var(--sapHorizon-FontSize-Large);
}

.modernHeaderStatus {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Success);
  font-weight: 500;
}

.modernHeaderButton {
  min-width: 2.25rem;
  height: 2.25rem;
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  margin-left: var(--sapHorizon-Space-Tiny);
  color: var(--sapHorizon-Neutral-600);
}

.modernHeaderButton:hover {
  background-color: var(--sapHorizon-Blue-Secondary);
  color: var(--sapHorizon-Blue-Primary);
}

/* Messages Container */
.modernChatMessagesContainer {
  flex: 1;
  background: transparent;
}

.modernMessagesWrapper {
  max-width: 768px;
  margin: 0 auto;
  padding: var(--sapHorizon-Space-XLarge);
  min-height: 100%;
}

.modernMessagesList {
  background: transparent;
}

.modernMessageItem {
  background: transparent;
  margin-bottom: var(--sapHorizon-Space-Large);
  border: none;
}

.modernMessageRow {
  align-items: flex-start;
  gap: var(--sapHorizon-Space-Medium);
}

/* User Messages */
.modernUserMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernUserMessage {
  background: var(--sapHorizon-Blue-Primary);
  color: var(--sapHorizon-Neutral-100);
  padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small) var(--sapHorizon-BorderRadius-Large);
  max-width: 70%;
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernUserMessage:hover {
  box-shadow: var(--sapHorizon-Shadow-Level2);
}

.modernUserText {
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.5;
  color: var(--sapHorizon-Neutral-100) !important;
  word-wrap: break-word;
}

.modernUserTimestamp {
  font-size: var(--sapHorizon-FontSize-Small);
  color: rgba(255, 255, 255, 0.8);
  margin-top: var(--sapHorizon-Space-Tiny);
  text-align: right;
}

.modernUserAvatar {
  margin-top: 2px;
}

/* Assistant Messages */
.modernAssistantMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernAssistantMessage {
  background: var(--sapHorizon-Neutral-100);
  border: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small);
  max-width: 75%;
  box-shadow: var(--sapHorizon-Shadow-Level1);
  position: relative;
}

.modernAssistantMessage:hover {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: var(--sapHorizon-Shadow-Level2);
}

.modernAssistantMessage:hover .modernMessageActions {
  opacity: 1;
}

.modernAssistantText {
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.6;
  color: var(--sapHorizon-Neutral-800) !important;
  word-wrap: break-word;
}

.modernMessageFooter {
  margin-top: var(--sapHorizon-Space-Small);
}

.modernAssistantTimestamp {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-500);
}

.modernMessageActions {
  opacity: 0;
  transition: opacity 0.2s ease;
  gap: var(--sapHorizon-Space-Tiny);
}

.modernActionButton {
  min-width: 1.75rem;
  height: 1.75rem;
  border-radius: var(--sapHorizon-BorderRadius-Small);
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-600);
}

.modernActionButton:hover {
  background-color: var(--sapHorizon-Blue-Secondary);
  color: var(--sapHorizon-Blue-Primary);
}

.modernAssistantAvatar {
  margin-top: 2px;
}

/* System Messages */
.modernSystemMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Medium);
}

.modernSystemMessage {
  background: var(--sapHorizon-Blue-Secondary);
  border: 1px solid var(--sapHorizon-Blue-Primary);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large);
  max-width: 80%;
}

.modernSystemText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Blue-Accent);
  text-align: center;
  font-style: italic;
}

/* Typing Indicator */
.modernTypingContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernTypingMessage {
  background: var(--sapHorizon-Neutral-100);
  border: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small);
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernTypingIndicator {
  display: flex;
  align-items: center;
  gap: var(--sapHorizon-Space-Tiny);
}

.modernTypingDot {
  width: 0.5rem !important;
  height: 0.5rem !important;
  border-radius: 50%;
  background-color: var(--sapHorizon-Blue-Primary);
  font-size: 0 !important; /* Hide any icon content */
  min-width: 0.5rem;
  min-height: 0.5rem;
}

.modernTypingDot1 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
  animation-delay: -0.32s;
}

.modernTypingDot2 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
  animation-delay: -0.16s;
}

.modernTypingDot3 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
}

@keyframes horizonTypingBounce {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}

.modernTypingText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-600);
  margin-left: var(--sapHorizon-Space-Small);
  font-style: italic;
}

/* Input Area */
.modernInputContainer {
  background: var(--sapHorizon-Neutral-100);
  border-top: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large) var(--sapHorizon-Space-XLarge);
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernInputRow {
  gap: var(--sapHorizon-Space-Medium);
  align-items: flex-end;
}

.modernInputWrapper {
  flex: 1;
}

.modernInputField {
  border: 1px solid var(--sapHorizon-Neutral-400);
  border-radius: var(--sapHorizon-BorderRadius-Large);
  background: var(--sapHorizon-Neutral-100);
  transition: all 0.2s ease;
  resize: none;
}

.modernInputField:focus {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: 0 0 0 2px var(--sapHorizon-Blue-Secondary);
}

.modernInputField:focus-within {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: 0 0 0 2px var(--sapHorizon-Blue-Secondary);
}

.modernInputField textarea {
  padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large) !important;
  border: none !important;
  outline: none !important;
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.5;
  font-family: var(--sapHorizon-FontFamily);
  color: var(--sapHorizon-Neutral-800);
}

.modernSendButton {
  min-width: 2.5rem;
  height: 2.5rem;
  border-radius: var(--sapHorizon-BorderRadius-Large);
  background: var(--sapHorizon-Blue-Primary);
  color: var(--sapHorizon-Neutral-100);
  transition: all 0.2s ease;
}

.modernSendButton:hover {
  background: var(--sapHorizon-Blue-Accent);
  transform: scale(1.02);
}

.modernSendButton:active {
  transform: scale(0.98);
}

/* Input Footer - Minimal Design */
.modernInputFooter {
  margin-top: var(--sapHorizon-Space-Small);
  padding: var(--sapHorizon-Space-Tiny) var(--sapHorizon-Space-Small);
  background: transparent;
  border: none;
  min-height: 1.2rem;
}

.modernCharCounter {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Warning);
  font-weight: 500;
  margin-right: var(--sapHorizon-Space-Small);
}

.modernStatusMessage {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-500);
  font-weight: 400;
  font-style: italic;
}

/* Scrollbar Styling - SAP Horizon */
.modernChatMessagesContainer .sapMScrollCont {
  scrollbar-width: thin;
  scrollbar-color: var(--sapHorizon-Neutral-400) transparent;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar {
  width: 6px;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-track {
  background: transparent;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-thumb {
  background-color: var(--sapHorizon-Neutral-400);
  border-radius: var(--sapHorizon-BorderRadius-Small);
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-thumb:hover {
  background-color: var(--sapHorizon-Neutral-500);
}

/* Animations */
.modernMessageItem {
  animation: horizonFadeInUp 0.3s ease-out;
}

@keyframes horizonFadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Focus Management for Accessibility */
.modernHeaderButton:focus,
.modernActionButton:focus,
.modernSendButton:focus {
  outline: 2px solid var(--sapHorizon-Blue-Primary);
  outline-offset: 2px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .modernMessagesWrapper {
    padding: var(--sapHorizon-Space-Large);
  }
  
  .modernUserMessage,
  .modernAssistantMessage {
    max-width: 85%;
  }
  
  .modernInputContainer {
    padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  }
  
  .modernChatHeader {
    padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  }
}

/* Additional SAP Horizon Message Types */
.modernInfoMessageContainer,
.modernWarningMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Medium);
}

.modernInfoMessage {
  background: var(--sapHorizon-Blue-Secondary);
  border: 1px solid var(--sapHorizon-Blue-Primary);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  gap: var(--sapHorizon-Space-Small);
}

.modernInfoIcon {
  font-size: var(--sapHorizon-FontSize-Medium);
  color: var(--sapHorizon-Information);
}

.modernInfoText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Blue-Accent);
  font-weight: 500;
}

.modernWarningMessage {
  background: #FFF4E6;
  border: 1px solid var(--sapHorizon-Warning);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  gap: var(--sapHorizon-Space-Small);
}

.modernWarningIcon {
  font-size: var(--sapHorizon-FontSize-Medium);
  color: var(--sapHorizon-Warning);
}

.modernWarningText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: #8B4000;
  font-weight: 500;
}
</file>

<file path="app/webapp/ext/ChatSidePanelContent.fragment.xml">
<core:FragmentDefinition
    xmlns="sap.m"
    xmlns:core="sap.ui.core"
    xmlns:l="sap.ui.layout"
    xmlns:f="sap.f">
    
    <VBox height="100%" class="modernChatContainer">
        <!-- SAP Horizon Chat Header -->
        <HBox class="modernChatHeader" justifyContent="SpaceBetween" alignItems="Center">
            <HBox alignItems="Center">
                <core:Icon src="sap-icon://discussion-2" class="modernHeaderIcon"/>
                <VBox class="sapUiTinyMarginBegin">
                    <Title text="SAP AI Assistant" level="H5" class="modernHeaderTitle"/>
                    <Text text="Bereit zu helfen" class="modernHeaderStatus"/>
                </VBox>
            </HBox>
            <HBox>
                <Button 
                    icon="sap-icon://restart" 
                    type="Transparent" 
                    tooltip="Neuer Chat"
                    press="onClearChatHistory"
                    class="modernHeaderButton"
                    ariaLabel="Neuen Chat starten"/>
                <Button 
                    icon="sap-icon://action-settings" 
                    type="Transparent" 
                    tooltip="Einstellungen"
                    class="modernHeaderButton"
                    ariaLabel="Einstellungen öffnen"/>
            </HBox>
        </HBox>

        <!-- Chat Messages Area -->
        <ScrollContainer 
            id="chatHistoryScrollContainerInSidePanel"
            height="100%" 
            vertical="true" 
            horizontal="false"
            class="modernChatMessagesContainer">
            
            <VBox class="modernMessagesWrapper">
                <!-- Chat Messages List -->
                <List 
                    id="chatMessagesList"
                    items="{chat>/chatHistory}"
                    showSeparators="None"
                    mode="None"
                    class="modernMessagesList">
                    
                    <CustomListItem class="modernMessageItem">
                        <content>
                            <!-- User Message -->
                            <VBox visible="{= ${chat>type} === 'user' }" class="modernUserMessageContainer">
                                <HBox justifyContent="End" class="modernMessageRow">
                                    <VBox class="modernUserMessage">
                                        <FormattedText htmlText="{chat>text}" class="modernMessageText modernUserText"/>
                                        <Text text="{chat>timestamp}" class="modernTimestamp modernUserTimestamp"/>
                                    </VBox>
                                    <Avatar 
                                        src="" 
                                        initials="Sie" 
                                        displaySize="XS" 
                                        backgroundColor="Accent6"
                                        imageFitType="Cover"
                                        class="modernUserAvatar"/>
                                </HBox>
                            </VBox>
                            
                            <!-- Assistant Message -->
                            <VBox visible="{= ${chat>type} === 'assistant' }" class="modernAssistantMessageContainer">
                                <HBox justifyContent="Start" class="modernMessageRow">
                                    <Avatar 
                                        src="" 
                                        initials="AI" 
                                        displaySize="XS" 
                                        backgroundColor="Accent1"
                                        imageFitType="Cover"
                                        class="modernAssistantAvatar"/>
                                    <VBox class="modernAssistantMessage">
                                        <FormattedText htmlText="{chat>text}" class="modernMessageText modernAssistantText"/>
                                        <HBox justifyContent="SpaceBetween" alignItems="Center" class="modernMessageFooter">
                                            <Text text="{chat>timestamp}" class="modernTimestamp modernAssistantTimestamp"/>
                                            <HBox class="modernMessageActions" visible="{= ${chat>text} !== 'Thinking...' }">
                                                <Button 
                                                    icon="sap-icon://copy" 
                                                    type="Transparent" 
                                                    tooltip="Kopieren"
                                                    press="onCopyMessage"
                                                    class="modernActionButton"
                                                    ariaLabel="Nachricht kopieren"/>
                                                <Button 
                                                    icon="sap-icon://thumb-up" 
                                                    type="Transparent" 
                                                    tooltip="Gefällt mir"
                                                    class="modernActionButton"
                                                    ariaLabel="Positive Bewertung"/>
                                                <Button 
                                                    icon="sap-icon://thumb-down" 
                                                    type="Transparent" 
                                                    tooltip="Gefällt mir nicht"
                                                    class="modernActionButton"
                                                    ariaLabel="Negative Bewertung"/>
                                            </HBox>
                                        </HBox>
                                    </VBox>
                                </HBox>
                            </VBox>
                            
                            <!-- System Message -->
                            <VBox visible="{= ${chat>type} === 'system' }" class="modernSystemMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <VBox class="modernSystemMessage">
                                        <Text text="{chat>text}" class="modernSystemText"/>
                                    </VBox>
                                </HBox>
                            </VBox>
                            
                            <!-- Info Message -->
                            <VBox visible="{= ${chat>type} === 'info' }" class="modernInfoMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <HBox class="modernInfoMessage" alignItems="Center">
                                        <core:Icon src="sap-icon://information" class="modernInfoIcon"/>
                                        <Text text="{chat>text}" class="modernInfoText"/>
                                    </HBox>
                                </HBox>
                            </VBox>
                            
                            <!-- Warning Message -->
                            <VBox visible="{= ${chat>type} === 'warning' }" class="modernWarningMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <HBox class="modernWarningMessage" alignItems="Center">
                                        <core:Icon src="sap-icon://warning" class="modernWarningIcon"/>
                                        <Text text="{chat>text}" class="modernWarningText"/>
                                    </HBox>
                                </HBox>
                            </VBox>
                        </content>
                    </CustomListItem>
                </List>
                
                <!-- Typing Indicator -->
                <HBox 
                    visible="{chat>/isTyping}" 
                    justifyContent="Start" 
                    class="modernTypingContainer modernMessageRow">
                    <Avatar 
                        src="" 
                        initials="AI" 
                        displaySize="XS" 
                        backgroundColor="Accent1"
                        class="modernAssistantAvatar"/>
                    <VBox class="modernTypingMessage">
                        <HBox alignItems="Center">
                            <VBox class="modernTypingIndicator">
                                <core:Icon src="" class="modernTypingDot modernTypingDot1"/>
                                <core:Icon src="" class="modernTypingDot modernTypingDot2"/>
                                <core:Icon src="" class="modernTypingDot modernTypingDot3"/>
                            </VBox>
                            <Text text="AI Assistant schreibt..." class="modernTypingText"/>
                        </HBox>
                    </VBox>
                </HBox>
            </VBox>
        </ScrollContainer>

        <!-- Simple Input Area -->
        <VBox class="modernInputContainer">
            <!-- Input Row -->
            <HBox class="modernInputRow" alignItems="End">
                <VBox class="modernInputWrapper" width="100%">
                    <TextArea
                        id="chatInputField"
                        value="{chat>/userInput}"
                        placeholder="Nachricht an SAP AI Assistant..."
                        rows="3"
                        maxLength="4000"
                        width="100%"
                        growing="true"
                        growingMaxLines="6"
                        submit="onSendChatMessageInSidePanel"
                        class=""
                        ariaLabel="Chat Eingabe"/>
                </VBox>
                
                <Button
                    id="sendButton"
                    icon="sap-icon://paper-plane"
                    type="Transparent"
                    press="onSendChatMessageInSidePanel"
                    enabled="{= ${chat>/userInput}.length > 0 }"
                    class=""
                    ariaLabel="Nachricht senden"/>
            </HBox>
            
            <!-- Minimaler Input Footer -->
            <HBox justifyContent="End" alignItems="Center" class="modernInputFooter">
                <Text text="{= ${chat>/userInput}.length}/4000" class="modernCharCounter" visible="{= ${chat>/userInput}.length > 3800 }"/>
                <Text text="{chat>/statusMessage}" class="modernStatusMessage"/>
            </HBox>
        </VBox>
    </VBox>
</core:FragmentDefinition>
</file>

<file path="app/webapp/ext/CustomActions.js">
sap.ui.define([
    "sap/m/MessageToast"
], function (MessageToast) {
    "use strict";

    function getFEAppComponent(oController) {
        // oController ist hier die FE Page Controller Extension
        if (oController && oController.getOwnerComponent && oController.getOwnerComponent().getAppComponent) {
            return oController.getOwnerComponent().getAppComponent();
        }
        console.error("Could not get FE AppComponent from controller", oController);
        return null;
    }

    // Diese Funktion wird aufgerufen, wenn die Extension initialisiert wird
    // oder bevor die AI-Funktion das erste Mal gebraucht wird.
    function ensureAISendFunctionRegistered(oPageController) {
        var oFEAppComponent = getFEAppComponent(oPageController);
        if (oFEAppComponent && oFEAppComponent.registerAISendFunction && !oFEAppComponent._aiSendFunctionFromCustomAction) { // Nur einmal registrieren
            oFEAppComponent.registerAISendFunction(
                // Diese Funktion wird von der Component aufgerufen und hat den korrekten Scope
                function(sPrompt, oChatModelToUpdate) { // this ist hier die oPageController Instanz
                    var oExtensionAPI = this.getExtensionAPI(); // 'this' ist hier die CustomActions Instanz
                    var aHistory = oChatModelToUpdate.getProperty("/chatHistory"); // "Thinking..." ist schon drin

                    oExtensionAPI.invokeAction("StammtischService.callClaude", {
                        parameters: { prompt: sPrompt }
                    }).then(function (oResultContext) {
                        var resultData = oResultContext.getObject();
                        var sResponse = (resultData && resultData.response) ? resultData.response : "No valid response.";
                        aHistory.pop(); // "Thinking..." entfernen
                        aHistory.push({ type: "assistant", text: sResponse });
                        oChatModelToUpdate.setProperty("/chatHistory", aHistory);
                        oChatModelToUpdate.refresh(true);
                        if (window.triggerChatScroll) window.triggerChatScroll();
                    }.bind(this)).catch(function (oError) {
                        console.error("AI Action Error from CustomActions:", oError);
                        aHistory.pop(); // "Thinking..." entfernen
                        aHistory.push({ type: "assistant", text: "Error: " + (oError.message || "Unknown AI error") });
                        oChatModelToUpdate.setProperty("/chatHistory", aHistory);
                        oChatModelToUpdate.refresh(true);
                        if (window.triggerChatScroll) window.triggerChatScroll();
                    }.bind(this));
                }.bind(oPageController) // Wichtig: 'this' der äußeren Funktion (oPageController) binden!
            );
            console.log("AI Send function registered from CustomActions.");
        }
    }


    return {
        // Wird vom Button im Manifest aufgerufen
        onToggleChatSidePanel: function (/*oEvent*/) { // 'this' ist der FE Page Controller (Extension)
            var oFEAppComponent = getFEAppComponent(this);
            if (oFEAppComponent) {
                var oDynamicSideContent = oFEAppComponent.getDynamicSideContent();
                if (oDynamicSideContent) {
                    oDynamicSideContent.toggleSideContent();
                    // Sicherstellen, dass die AI-Sende-Funktion registriert ist,
                    // falls das Panel geöffnet wird und Chat-Funktionalität benötigt wird.
                    if (oDynamicSideContent.getSideContentVisible()) {
                         ensureAISendFunctionRegistered(this);
                         if (window.triggerChatScroll) window.triggerChatScroll(); // Ggf. zum Boden scrollen
                    }
                } else {
                    MessageToast.show("SidePanel control not found via FE Component.");
                }
            } else {
                MessageToast.show("FE Application Component not found.");
            }
        }

        // Die onSendChatMessageInSidePanel ist nicht mehr hier, sondern im oChatFragmentController in main.js
    };
});
</file>

<file path="app/webapp/i18n/i18n.properties">
# This is the resource bundle for sap.stammtisch.ui.app

#Texts for manifest.json

#XTIT: Application name
appTitle=Stammtisch Verwaltung

#YDES: Application description
appDescription=SAP Stammtisch

#XBUT: Text for AI Chat button
btnTextAIChat=AI Chat
</file>

<file path="app/webapp/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Stammtisch Verwaltung</title>
    <style>
        html, body, #appHost { /* Wichtig: appHost soll die volle Höhe einnehmen */
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <script
        id="sap-ui-bootstrap"
        src="https://sapui5.hana.ondemand.com/1.136.0/resources/sap-ui-core.js"
        data-sap-ui-theme="sap_horizon"
        data-sap-ui-resourceroots='{
            "sap.stammtisch.ui.app": "./"
        }'
        data-sap-ui-oninit="module:sap/stammtisch/ui/app/main"
        data-sap-ui-compatVersion="edge"
        data-sap-ui-async="true"
        data-sap-ui-frameOptions="trusted"
    ></script>
</head>
<body class="sapUiBody sapUiSizeCompact">
    <!-- Platzhalter für unsere App-Struktur, die von main.js gefüllt wird -->
    <div id="appHost"></div>
</body>
</html>
</file>

<file path="app/webapp/main.js">
sap.ui.define([
    "sap/ui/core/Component",
    "sap/ui/core/ComponentContainer",
    "sap/ui/layout/DynamicSideContent",
    "sap/ui/core/Fragment",
    "sap/ui/model/json/JSONModel",
    "sap/m/App",
    "sap/m/Page",
    "sap/m/Bar",
    "sap/m/Title",
    "sap/m/MessageToast"
], (Component, ComponentContainer, DynamicSideContent, Fragment, JSONModel, App, Page, Bar, Title, MessageToast) => {
    "use strict";

    // Modern class-based approach for Chat functionality
    class ChatManager {
        constructor() {
            this.chatModel = null;
            this.dynamicSideContent = null;
            this.feAppComponentInstance = null;
            this.currentRecognition = null;
            this.serviceUrl = "/service/stammtisch"; // Service URL from manifest.json
        }

        // Initialize chat model with welcome message
        initializeChatModel() {
            this.chatModel = new JSONModel({
                chatHistory: [],
                userInput: "",
                isTyping: false,
                statusMessage: ""
            });

            const welcomeHistory = [{
                type: "system",
                text: "👋 Welcome! I'm your AI assistant. I can help you with questions, tasks, and provide information. What would you like to know?",
                timestamp: this.getCurrentTimestamp()
            }];

            this.chatModel.setProperty("/chatHistory", welcomeHistory);
        }

        // Get current timestamp in HH:MM format
        getCurrentTimestamp() {
            return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Smooth scroll to bottom of chat
        scrollToBottom() {
            if (!this.dynamicSideContent) return;

            const scrollContainer = sap.ui.core.Fragment.byId(
                "chatSidePanelFragmentGlobal",
                "chatHistoryScrollContainerInSidePanel"
            );

            if (scrollContainer) {
                setTimeout(() => scrollContainer.scrollTo(0, 99999, 300), 100);
            }
        }

        async callClaudeViaOperationBinding(prompt) {
            try {
                if (!this.feAppComponentInstance) {
                    throw new Error("FE Component not available");
                }

                const oDataModel = this.feAppComponentInstance.getModel();

                if (!oDataModel) {
                    throw new Error("OData Model not found");
                }

                // Erstelle Operation Binding für unbound Action
                const oOperationBinding = oDataModel.bindContext("/callClaude(...)");

                // Setze Parameter
                oOperationBinding.setParameter("prompt", prompt);

                // Führe Action aus
                await oOperationBinding.execute();

                // Hole Ergebnis
                const oContext = oOperationBinding.getBoundContext();
                const result = oContext.getObject();

                console.log("Claude operation result:", result);

                return result.response || "No response received";

            } catch (error) {
                console.error("Error in callClaudeViaOperationBinding:", error);
                throw error;
            }
        }

        // Update status message with auto-clear
        setStatusMessage(message, duration = 3000) {
            this.chatModel.setProperty("/statusMessage", message);
            if (duration > 0) {
                setTimeout(() => this.chatModel.setProperty("/statusMessage", ""), duration);
            }
        }

        // Add message to chat history
        addMessage(type, text, timestamp = this.getCurrentTimestamp()) {
            const history = this.chatModel.getProperty("/chatHistory");
            history.push({ type, text, timestamp });
            this.chatModel.setProperty("/chatHistory", history);
            this.chatModel.refresh(true);
            this.scrollToBottom();
        }

        // Remove last "Thinking..." message
        removeThinkingMessage() {
            const history = this.chatModel.getProperty("/chatHistory");
            if (history.length > 0 && history[history.length - 1].text === "Thinking...") {
                history.pop();
                this.chatModel.setProperty("/chatHistory", history);
            }
        }

        // Handle AI response
        handleAIResponse(responseText) {
            this.removeThinkingMessage();
            this.addMessage("assistant", responseText);
            this.chatModel.setProperty("/isTyping", false);
            this.chatModel.setProperty("/statusMessage", "");
        }

        // Handle AI errors
        handleAIError(errorMessage) {
            this.removeThinkingMessage();
            this.addMessage("assistant", `I apologize, but I encountered an error: ${errorMessage}`);
            this.chatModel.setProperty("/isTyping", false);
            this.setStatusMessage("Error occurred", 5000);
        }

        // Call Claude service via HTTP
        async callClaudeService(prompt) {
            try {
                // Get CSRF token first
                const csrfToken = await this.getCSRFToken();

                // Prepare the request
                const requestOptions = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({
                        prompt: prompt
                    })
                };

                // Make the actual call to Claude service
                const response = await fetch(`${this.serviceUrl}/callClaude`, requestOptions);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                // Handle response from Claude
                if (data && data.response) {
                    return data.response;
                } else {
                    throw new Error("No valid response from Claude service");
                }

            } catch (error) {
                console.error("Error calling Claude service:", error);
                throw error;
            }
        }

        // Get CSRF token for OData service calls
        async getCSRFToken() {
            try {
                const response = await fetch(`${this.serviceUrl}/`, {
                    method: 'GET',
                    headers: {
                        'X-CSRF-Token': 'Fetch'
                    }
                });

                return response.headers.get('X-CSRF-Token') || '';
            } catch (error) {
                console.warn("Could not fetch CSRF token:", error);
                return '';
            }
        }

        // Modern clipboard copy with fallback
        async copyToClipboard(text) {
            try {
                if (navigator.clipboard?.writeText) {
                    await navigator.clipboard.writeText(text);
                    this.setStatusMessage("Copied to clipboard", 2000);
                } else {
                    // Fallback for older browsers
                    const textArea = document.createElement("textarea");
                    textArea.value = text;
                    textArea.style.position = "fixed";
                    textArea.style.opacity = "0";
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    this.setStatusMessage("Copied to clipboard", 2000);
                }
            } catch (error) {
                console.error('Copy failed:', error);
                this.setStatusMessage("Failed to copy", 2000);
            }
        }

        // Modern speech recognition
        startVoiceInput() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

            if (!SpeechRecognition) {
                this.setStatusMessage("Voice input not supported in this browser");
                return;
            }

            // Stop any existing recognition
            if (this.currentRecognition) {
                this.currentRecognition.stop();
            }

            this.currentRecognition = new SpeechRecognition();
            Object.assign(this.currentRecognition, {
                continuous: false,
                interimResults: false,
                lang: 'en-US'
            });

            this.setStatusMessage("Listening...", 0);

            this.currentRecognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                this.chatModel.setProperty("/userInput", transcript);
                this.setStatusMessage("Voice input received", 2000);
            };

            this.currentRecognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                this.setStatusMessage("Voice input failed");
            };

            this.currentRecognition.onend = () => {
                this.currentRecognition = null;
                this.setStatusMessage("");
            };

            this.currentRecognition.start();
        }
    }


    // Create singleton instance
    const chatManager = new ChatManager();

    // Modern Chat Controller with arrow functions
    const chatController = {
        async onSendChatMessageInSidePanel() {
            const userInput = chatManager.chatModel.getProperty("/userInput")?.trim();

            if (!userInput) {
                chatManager.setStatusMessage("Please enter a message.");
                return;
            }

            // Add user message
            chatManager.addMessage("user", userInput);

            // Clear input and set loading state
            chatManager.chatModel.setProperty("/userInput", "");
            chatManager.chatModel.setProperty("/isTyping", true);
            chatManager.setStatusMessage("Sending...", 0);

            // Add thinking placeholder
            chatManager.addMessage("assistant", "Thinking...");

            try {
                // Call Claude service directly
                const aiResponse = await chatManager.callClaudeViaOperationBinding(userInput);

                // Handle successful response
                chatManager.handleAIResponse(aiResponse);
                chatManager.setStatusMessage("Response received", 2000);

            } catch (error) {
                console.error("Claude service call failed:", error);
                chatManager.handleAIError(error.message || "Failed to get response from AI service");
            }
        },


        onClearChatHistory() {
            sap.m.MessageBox.confirm(
                "Start a new chat? This will clear your current conversation.",
                {
                    title: "New Chat",
                    onClose: (action) => {
                        if (action === sap.m.MessageBox.Action.OK) {
                            // Reset chat state
                            Object.assign(chatManager.chatModel.getData(), {
                                chatHistory: [],
                                userInput: "",
                                isTyping: false,
                                statusMessage: "New chat started"
                            });

                            // Add welcome message
                            chatManager.addMessage(
                                "system",
                                "New conversation started. How can I help you today?"
                            );

                            chatManager.setStatusMessage("New chat started");
                        }
                    }
                }
            );
        },

        async onCopyMessage(event) {
            const context = event.getSource().getBindingContext("chat");
            const messageText = context.getProperty("text");
            await chatManager.copyToClipboard(messageText);
        },

        onAttachFile() {
            // Placeholder for future file upload functionality
            chatManager.setStatusMessage("File attachment coming soon...");
        },

        onVoiceInput() {
            chatManager.startVoiceInput();
        }
    };

    // Enhanced global functions
    const globalFunctions = {
        addAIResponse: (responseText) => chatManager.handleAIResponse(responseText),
        addSystemMessage: (message) => chatManager.addMessage("system", message),
        handleAIError: (errorMessage) => chatManager.handleAIError(errorMessage),
        triggerChatScroll: () => chatManager.scrollToBottom()
    };

    // Assign to window for external access
    Object.assign(window, globalFunctions);

    // Modern keyboard shortcuts with better event handling
    const setupKeyboardShortcuts = () => {
        document.addEventListener('keydown', (event) => {
            const { ctrlKey, metaKey, key } = event;
            const inputField = sap.ui.core.Fragment.byId("chatSidePanelFragmentGlobal", "chatInputField");
            const isInputFocused = inputField?.getFocusDomRef() === document.activeElement;

            if (!isInputFocused) return;

            // Ctrl/Cmd + Enter to send message
            if ((ctrlKey || metaKey) && key === 'Enter') {
                event.preventDefault();
                chatController.onSendChatMessageInSidePanel();
            }

            // Escape to clear input
            if (key === 'Escape') {
                chatManager.chatModel.setProperty("/userInput", "");
            }
        });
    };

    // Modern app initialization with async/await
    const initializeApp = async () => {
        try {
            // Initialize chat model
            chatManager.initializeChatModel();

            // Create DynamicSideContent
            chatManager.dynamicSideContent = new DynamicSideContent("appDynamicSideContentGlobal", {
                sideContentVisible: false,
                height: "100%"
            });
            chatManager.dynamicSideContent.setModel(chatManager.chatModel, "chat");

            // Load chat fragment
            const chatPanelContent = await Fragment.load({
                id: "chatSidePanelFragmentGlobal",
                name: "sap.stammtisch.ui.app.ext.ChatSidePanelContent",
                controller: chatController
            });
            chatManager.dynamicSideContent.addSideContent(chatPanelContent);

            // Create Fiori Elements component
            const feComponent = await Component.create({
                name: "sap.stammtisch.ui.app",
                id: "feAppComponentCore"
            });

            chatManager.feAppComponentInstance = feComponent;

            // Set external dependencies if available
            if (feComponent.setExternalDependencies) {
                feComponent.setExternalDependencies(
                    chatManager.chatModel,
                    chatManager.dynamicSideContent
                );
            } else {
                console.warn(
                    "Method 'setExternalDependencies' not found on FE Component. " +
                    "Chat/SidePanel might not be fully functional from custom actions."
                );
            }

            // Create component container and app structure
            const componentContainer = new ComponentContainer({
                component: feComponent,
                height: "100%"
            });
            chatManager.dynamicSideContent.addMainContent(componentContainer);

            const mainPage = new Page("mainAppPage", {
                showHeader: false,
                content: [chatManager.dynamicSideContent],
                height: "100%"
            });

            const appControl = new App({
                pages: [mainPage],
                height: "100%"
            });

            // Mount app
            appControl.placeAt("appHost");

            // Setup keyboard shortcuts
            setupKeyboardShortcuts();

            console.log("Application initialized successfully");

        } catch (error) {
            console.error("Failed to initialize application:", error);

            const appHostDiv = document.getElementById("appHost");
            if (appHostDiv) {
                appHostDiv.innerHTML = `
                    <div style="padding: 20px; color: #d32f2f; font-family: Arial, sans-serif;">
                        <h2>Application Error</h2>
                        <p><strong>Error:</strong> ${error.message}</p>
                        <p>Please check the console for more details.</p>
                    </div>
                `;
            }
        }
    };

    // Initialize when SAP UI5 core is ready
    sap.ui.getCore().attachInit(initializeApp);
});
</file>

<file path="app/webapp/manifest.json">
{
  "_version": "1.65.0",
  "sap.app": {
    "id": "sap.stammtisch.ui.app",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:lrop",
      "version": "1.17.5",
      "toolsId": "2418c640-e786-47b9-ad94-903960b6e258"
    },
    "dataSources": {
      "mainService": {
        "uri": "/service/stammtisch/",
        "type": "OData",
        "settings": {
          "annotations": [],
          "odataVersion": "4.0"
        }
      }
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {
      "icon": "",
      "favIcon": "",
      "phone": "",
      "phone@2": "",
      "tablet": "",
      "tablet@2": ""
    },
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "flexEnabled": true,
    "dependencies": {
      "minUI5Version": "1.136.0",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.fe.templates": {}
      }
    },
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "sap.stammtisch.ui.app.i18n.i18n"
        }
      },
      "": {
        "dataSource": "mainService",
        "preload": true,
        "settings": {
          "operationMode": "Server",
          "autoExpandSelect": true,
          "earlyRequests": true
        }
      },
      "@i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "uri": "i18n/i18n.properties"
      }
    },
    "resources": {
      "css": [
        {
          "uri": "css/customStyles.css"
        }
      ]
    },
    "routing": {
      "config": {},
      "routes": [
        {
          "pattern": ":?query:",
          "name": "StammtischeList",
          "target": "StammtischeList"
        },
        {
          "pattern": "Stammtische({key}):?query:",
          "name": "StammtischeObjectPage",
          "target": "StammtischeObjectPage"
        },
        {
          "pattern": "Stammtische({key})/teilnehmer({key2}):?query:",
          "name": "TeilnehmerObjectPage",
          "target": "TeilnehmerObjectPage"
        }
      ],
      "targets": {
        "StammtischeList": {
          "type": "Component",
          "id": "StammtischeList",
          "name": "sap.fe.templates.ListReport",
          "options": {
            "settings": {
              "contextPath": "/Stammtische",
              "variantManagement": "Page",
              "navigation": {
                "Stammtische": {
                  "detail": {
                    "route": "StammtischeObjectPage"
                  }
                }
              },
              "controlConfiguration": {
                "@com.sap.vocabularies.UI.v1.LineItem": {
                  "tableSettings": {
                    "type": "ResponsiveTable"
                  }
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        },
        "StammtischeObjectPage": {
          "type": "Component",
          "id": "StammtischeObjectPage",
          "name": "sap.fe.templates.ObjectPage",
          "options": {
            "settings": {
              "editableHeaderContent": false,
              "contextPath": "/Stammtische",
              "navigation": {
                "teilnehmer": {
                  "detail": {
                    "route": "TeilnehmerObjectPage"
                  }
                }
              },
              "actions": {
                "AIChatActionStammtischOP": {
                  "press": "sap.stammtisch.ui.app.ext.CustomActions.onToggleChatSidePanel",
                  "text": "{{btnTextAIChat}}",
                  "visible": true,
                  "enabled": true,
                  "requiresSelection": false
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        },
        "TeilnehmerObjectPage": {
          "type": "Component",
          "id": "TeilnehmerObjectPage",
          "name": "sap.fe.templates.ObjectPage",
          "options": {
            "settings": {
              "editableHeaderContent": false,
              "contextPath": "/Stammtische/teilnehmer",
              "actions": {
                "AIChatActionTeilnehmerOP": {
                  "press": "sap.stammtisch.ui.app.ext.CustomActions.onOpenAIChatDialog",
                  "text": "{{btnTextAIChat}}",
                  "visible": true,
                  "enabled": true,
                  "requiresSelection": false
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        }
      }
    }
  },
  "sap.fiori": {
    "registrationIds": [],
    "archeType": "transactional"
  }
}
</file>

<file path="app/webapp/test/flpSandbox.html">
<!DOCTYPE HTML>
<html lang="en">
<!-- Copyright (c) 2015 SAP AG, All Rights Reserved -->
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{appTitle}}</title>

    <!-- Bootstrap the unified shell in sandbox mode for standalone usage.

         The renderer is specified in the global Unified Shell configuration object "sap-ushell-config".

         The fiori2 renderer will render the shell header allowing, for instance,
         testing of additional application setting buttons.

         The navigation target resolution service is configured in a way that the empty URL hash is
         resolved to our own application.

         This example uses relative path references for the SAPUI5 resources and test-resources;
         it might be necessary to adapt them depending on the target runtime platform.
         The sandbox platform is restricted to development or demo use cases and must NOT be used
         for productive scenarios.
    -->
    <script type="text/javascript">
        window["sap-ushell-config"] = {
            defaultRenderer: "fiori2",
            bootstrapPlugins: {
                "RuntimeAuthoringPlugin": {
                    component: "sap.ushell.plugins.rta",
                    config: {
                        validateAppVersion: false
                    }
                }
            },
            renderers: {
                fiori2: {
                    componentData: {
                        config: {
                            search: "hidden",
                            enableSearch: false
                        }
                    }
                }
            },
            applications: {
                "sapstammtischuiapp-tile": {
                    title: "Stammtisch Verwaltung",
                    description: "SAP Stammtisch",
                    additionalInformation: "SAPUI5.Component=sap.stammtisch.ui.app",
                    applicationType: "URL",
                    url: "../"
                }
            }
        };
    </script>

    <script src="https://sapui5.hana.ondemand.com/1.136.0/test-resources/sap/ushell/bootstrap/sandbox.js" id="sap-ushell-bootstrap"></script>
    <!-- Bootstrap the UI5 core library. 'data-sap-ui-frameOptions="allow"'' is a NON-SECURE setting for test environments -->
    <script id="sap-ui-bootstrap"
        src="https://sapui5.hana.ondemand.com/1.136.0/resources/sap-ui-core.js"
        data-sap-ui-libs=""
        data-sap-ui-async="true"
        data-sap-ui-preload="async"
        data-sap-ui-theme="sap_horizon"
        data-sap-ui-compatVersion="edge"
        data-sap-ui-language="en"
        data-sap-ui-resourceroots='{"sap.stammtisch.ui.app": "../"}'
        data-sap-ui-frameOptions="allow"
        data-sap-ui-flexibilityServices='[{"connector": "LocalStorageConnector"}]'>
    </script>
    <script>
        sap.ui.getCore().attachInit(function () {
            sap.ushell.Container.createRenderer().placeAt("content");
        });
    </script>
</head>

<!-- UI Content -->

<body class="sapUiBody" id="content">
</body>

</html>
</file>

<file path="app/webapp/test/integration/FirstJourney.js">
sap.ui.define([
    "sap/ui/test/opaQunit"
], function (opaTest) {
    "use strict";

    var Journey = {
        run: function() {
            QUnit.module("First journey");

            opaTest("Start application", function (Given, When, Then) {
                Given.iStartMyApp();

                Then.onTheStammtischeList.iSeeThisPage();

            });


            opaTest("Navigate to ObjectPage", function (Given, When, Then) {
                // Note: this test will fail if the ListReport page doesn't show any data
                
                When.onTheStammtischeList.onFilterBar().iExecuteSearch();
                
                Then.onTheStammtischeList.onTable().iCheckRows();

                When.onTheStammtischeList.onTable().iPressRow(0);
                Then.onTheStammtischeObjectPage.iSeeThisPage();

            });

            opaTest("Teardown", function (Given, When, Then) { 
                // Cleanup
                Given.iTearDownMyApp();
            });
        }
    }

    return Journey;
});
</file>

<file path="app/webapp/test/integration/opaTests.qunit.html">
<!DOCTYPE html>
<html>
<head>
    <title>Integration tests</title>
    <meta charset="utf-8">

    <script id="sap-ui-bootstrap"
            src="/resources/sap-ui-core.js"
            data-sap-ui-theme='sap_fiori_3'
            data-sap-ui-resourceroots='{
                "sap.stammtisch.ui.app": "../../"
            }'
            data-sap-ui-animation="false"
            data-sap-ui-compatVersion="edge"
            data-sap-ui-async="true">
    </script>

    <link rel="stylesheet" type="text/css" href="/resources/sap/ui/thirdparty/qunit-2.css">

    <script src="/resources/sap/ui/thirdparty/qunit-2.js"></script>
    <script src="/resources/sap/ui/qunit/qunit-junit.js"></script>

    <script src="opaTests.qunit.js"></script>

</head>
<body>
    <div id="qunit"></div>
    <div id="qunit-fixture"></div>
</body>
</html>
</file>

<file path="app/webapp/test/integration/opaTests.qunit.js">
sap.ui.require(
    [
        'sap/fe/test/JourneyRunner',
        'sap/stammtisch/ui/app/test/integration/FirstJourney',
		'sap/stammtisch/ui/app/test/integration/pages/StammtischeList',
		'sap/stammtisch/ui/app/test/integration/pages/StammtischeObjectPage',
		'sap/stammtisch/ui/app/test/integration/pages/TeilnehmerObjectPage'
    ],
    function(JourneyRunner, opaJourney, StammtischeList, StammtischeObjectPage, TeilnehmerObjectPage) {
        'use strict';
        var JourneyRunner = new JourneyRunner({
            // start index.html in web folder
            launchUrl: sap.ui.require.toUrl('sap/stammtisch/ui/app') + '/index.html'
        });

       
        JourneyRunner.run(
            {
                pages: { 
					onTheStammtischeList: StammtischeList,
					onTheStammtischeObjectPage: StammtischeObjectPage,
					onTheTeilnehmerObjectPage: TeilnehmerObjectPage
                }
            },
            opaJourney.run
        );
    }
);
</file>

<file path="app/webapp/test/integration/pages/StammtischeList.js">
sap.ui.define(['sap/fe/test/ListReport'], function(ListReport) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ListReport(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'StammtischeList',
            contextPath: '/Stammtische'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/integration/pages/StammtischeObjectPage.js">
sap.ui.define(['sap/fe/test/ObjectPage'], function(ObjectPage) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ObjectPage(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'StammtischeObjectPage',
            contextPath: '/Stammtische'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/integration/pages/TeilnehmerObjectPage.js">
sap.ui.define(['sap/fe/test/ObjectPage'], function(ObjectPage) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ObjectPage(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'TeilnehmerObjectPage',
            contextPath: '/Stammtische/teilnehmer'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/testsuite.qunit.html">
<!DOCTYPE html>
<html>
  <head>
    <title>QUnit test suite</title>
    <script src="../resources/sap/ui/qunit/qunit-redirect.js"></script>
    <script src="testsuite.qunit.js" data-sap-ui-testsuite></script>
  </head>
  <body></body>
</html>
</file>

<file path="app/webapp/test/testsuite.qunit.js">
window.suite = function() {
    'use strict';

    // eslint-disable-next-line
    var oSuite = new parent.jsUnitTestSuite(),
    
    sContextPath = location.pathname.substring(0, location.pathname.lastIndexOf('/') + 1);
    oSuite.addTestPage(sContextPath + 'integration/opaTests.qunit.html');

    return oSuite;
};
</file>

<file path="services.cds">
using from './app/annotations';
</file>

</files>
