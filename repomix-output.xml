This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cdsrc.json
.gitignore
app/annotations.cds
app/package.json
app/README.md
app/ui5.yaml
app/webapp/Component.js
app/webapp/css/customStyles.css
app/webapp/ext/ChatSidePanelContent.fragment.xml
app/webapp/i18n/i18n.properties
app/webapp/index.html
app/webapp/main.js
app/webapp/manifest.json
app/webapp/test/flpSandbox.html
app/webapp/test/integration/FirstJourney.js
app/webapp/test/integration/opaTests.qunit.html
app/webapp/test/integration/opaTests.qunit.js
app/webapp/test/integration/pages/StammtischeList.js
app/webapp/test/integration/pages/StammtischeObjectPage.js
app/webapp/test/integration/pages/TeilnehmerObjectPage.js
app/webapp/test/testsuite.qunit.html
app/webapp/test/testsuite.qunit.js
db/data/sap.stammtisch-Praesentatoren.csv
db/data/sap.stammtisch-Stammtische.csv
db/schema.cds
eslint.config.mjs
package.json
srv/agents/enhanced-agent.js
srv/prompts/assistant-prompt.js
srv/prompts/prompt-config.json
srv/service.cds
srv/service.js
srv/tools/database-tools.js
srv/utils/markdown-converter.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# CAP StammtischAI
_out
*.db
*.sqlite
connection.properties
default-*.json
.cdsrc-private.json
gen/
node_modules/
target/

# Web IDE, App Studio
.che/
.gen/

# MTA
*_mta_build_tmp
*.mtar
mta_archives/

# Other
.DS_Store
*.orig
*.log

*.iml
*.flattened-pom.xml

# IDEs
# .vscode
# .idea

# @cap-js/cds-typer
@cds-models
</file>

<file path="app/annotations.cds">
using StammtischService as service from '../srv/service';
annotate service.Stammtische with @(
    UI.FieldGroup #GeneratedGroup : {
        $Type : 'UI.FieldGroupType',
        Data : [
            {
                $Type : 'UI.DataField',
                Label : 'thema',
                Value : thema,
            },
            {
                $Type : 'UI.DataField',
                Label : 'datum',
                Value : datum,
            },
            {
                $Type : 'UI.DataField',
                Label : 'ort',
                Value : ort,
            },
            {
                $Type : 'UI.DataField',
                Label : 'notizen',
                Value : notizen,
            },
        ],
    },
    UI.Facets : [
        {
            $Type : 'UI.ReferenceFacet',
            ID : 'GeneratedFacet1',
            Label : 'General Information',
            Target : '@UI.FieldGroup#GeneratedGroup',
        },
    ],
    UI.LineItem : [
        {
            $Type : 'UI.DataField',
            Label : 'thema',
            Value : thema,
        },
        {
            $Type : 'UI.DataField',
            Label : 'datum',
            Value : datum,
        },
        {
            $Type : 'UI.DataField',
            Label : 'ort',
            Value : ort,
        },
        {
            $Type : 'UI.DataField',
            Label : 'notizen',
            Value : notizen,
        },
    ],
);

annotate service.Stammtische with {
    praesentator @Common.ValueList : {
        $Type : 'Common.ValueListType',
        CollectionPath : 'Praesentatoren',
        Parameters : [
            {
                $Type : 'Common.ValueListParameterInOut',
                LocalDataProperty : praesentator_ID,
                ValueListProperty : 'ID',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'name',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'email',
            },
            {
                $Type : 'Common.ValueListParameterDisplayOnly',
                ValueListProperty : 'linkedin',
            },
        ],
    }
};
</file>

<file path="app/package.json">
{
  "name": "app",
  "version": "0.0.1",
  "description": "SAP Stammtisch",
  "keywords": [
    "ui5",
    "openui5",
    "sapui5"
  ],
  "main": "webapp/index.html",
  "dependencies": {},
  "devDependencies": {
    "@ui5/cli": "^3.0.0",
    "@sap/ux-ui5-tooling": "1"
  },
  "scripts": {
    "deploy-config": "npx -p @sap/ux-ui5-tooling fiori add deploy-config cf"
  }
}
</file>

<file path="app/README.md">
## Application Details
|               |
| ------------- |
|**Generation Date and Time**<br>Sun May 18 2025 13:33:29 GMT+0200 (Mitteleuropäische Sommerzeit)|
|**App Generator**<br>SAP Fiori Application Generator|
|**App Generator Version**<br>1.17.5|
|**Generation Platform**<br>CLI|
|**Template Used**<br>List Report Page V4|
|**Service Type**<br>Local Cap|
|**Service URL**<br>http://localhost:4004/service/stammtisch/|
|**Module Name**<br>app|
|**Application Title**<br>Stammtisch Verwaltung|
|**Namespace**<br>sap.stammtisch.ui|
|**UI5 Theme**<br>sap_horizon|
|**UI5 Version**<br>1.136.0|
|**Enable Code Assist Libraries**<br>False|
|**Enable TypeScript**<br>False|
|**Add Eslint configuration**<br>False|
|**Main Entity**<br>Stammtische|
|**Navigation Entity**<br>teilnehmer|

## app

SAP Stammtisch

### Starting the generated app

-   This app has been generated using the SAP Fiori tools - App Generator, as part of the SAP Fiori tools suite.  In order to launch the generated app, simply start your CAP project and navigate to the following location in your browser:

http://localhost:4004/app/webapp/index.html

#### Pre-requisites:

1. Active NodeJS LTS (Long Term Support) version and associated supported NPM version.  (See https://nodejs.org)
</file>

<file path="app/ui5.yaml">
# yaml-language-server: $schema=https://sap.github.io/ui5-tooling/schema/ui5.yaml.json

specVersion: "3.1"
metadata:
  name: sap.stammtisch.ui.app
type: application
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false # If set to true, certificate errors will be ignored. E.g. self-signed certificates will be accepted
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://sapui5.hana.ondemand.com
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
        delay: 300
</file>

<file path="app/webapp/Component.js">
sap.ui.define([
    "sap/fe/core/AppComponent"
    // JSONModel wird nicht mehr hier direkt benötigt, kommt von außen
], function (AppComponent) {
    "use strict";

    return AppComponent.extend("sap.stammtisch.ui.app.Component", {
        metadata: {
            manifest: "json"
        },

        _oChatModelExternal: null,
        _oDynamicSideContentExternal: null,
        _aiSendFunctionFromCustomAction: null, // Für den AI Call aus CustomAction

        init: function () {
            // Standard FE Initialisierung
            AppComponent.prototype.init.apply(this, arguments);
            console.log("Fiori Elements Component 'sap.stammtisch.ui.app' initialized.");
        },

        // Wird von main.js aufgerufen
        setExternalDependencies: function(oChatModel, oDynamicSideContent) {
            this._oChatModelExternal = oChatModel;
            this._oDynamicSideContentExternal = oDynamicSideContent;
        },

        getChatModel: function() {
            return this._oChatModelExternal;
        },

        getDynamicSideContent: function() {
            return this._oDynamicSideContentExternal;
        },

        // Wird von CustomActions.js aufgerufen, um die Sende-Logik zu registrieren
        registerAISendFunction: function(fnSend) {
            this._aiSendFunctionFromCustomAction = fnSend;
        },

        // Wird von main.js (ChatFragmentController) aufgerufen
        invokeAIActionOnCurrentPage: function(sPrompt, oChatModelToUpdate) {
            if (this._aiSendFunctionFromCustomAction) {
                // Ruft die in CustomActions.js definierte Funktion auf,
                // die den korrekten `this`-Kontext (ExtensionAPI) hat.
                this._aiSendFunctionFromCustomAction(sPrompt, oChatModelToUpdate);
            } else {
                console.error("AI Send function from CustomAction not registered on FE component.");
                var aHistory = oChatModelToUpdate.getProperty("/chatHistory");
                aHistory.pop(); // "Thinking..." entfernen
                aHistory.push({ type: "assistant", text: "Error: AI Call handler not registered." });
                oChatModelToUpdate.setProperty("/chatHistory", aHistory);
                oChatModelToUpdate.refresh(true);
                if (window.triggerChatScroll) window.triggerChatScroll();
            }
        }
    });
});
</file>

<file path="app/webapp/i18n/i18n.properties">
# This is the resource bundle for sap.stammtisch.ui.app

#Texts for manifest.json

#XTIT: Application name
appTitle=Stammtisch Verwaltung

#YDES: Application description
appDescription=SAP Stammtisch

#XBUT: Text for AI Chat button
btnTextAIChat=AI Chat
</file>

<file path="app/webapp/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Stammtisch Verwaltung</title>
    <style>
        html, body, #appHost { /* Wichtig: appHost soll die volle Höhe einnehmen */
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <script
        id="sap-ui-bootstrap"
        src="https://sapui5.hana.ondemand.com/1.136.0/resources/sap-ui-core.js"
        data-sap-ui-theme="sap_horizon"
        data-sap-ui-resourceroots='{
            "sap.stammtisch.ui.app": "./"
        }'
        data-sap-ui-oninit="module:sap/stammtisch/ui/app/main"
        data-sap-ui-compatVersion="edge"
        data-sap-ui-async="true"
        data-sap-ui-frameOptions="trusted"
    ></script>
</head>
<body class="sapUiBody sapUiSizeCompact">
    <!-- Platzhalter für unsere App-Struktur, die von main.js gefüllt wird -->
    <div id="appHost"></div>
</body>
</html>
</file>

<file path="app/webapp/manifest.json">
{
  "_version": "1.65.0",
  "sap.app": {
    "id": "sap.stammtisch.ui.app",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:lrop",
      "version": "1.17.5",
      "toolsId": "2418c640-e786-47b9-ad94-903960b6e258"
    },
    "dataSources": {
      "mainService": {
        "uri": "/service/stammtisch/",
        "type": "OData",
        "settings": {
          "annotations": [],
          "odataVersion": "4.0"
        }
      }
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {
      "icon": "",
      "favIcon": "",
      "phone": "",
      "phone@2": "",
      "tablet": "",
      "tablet@2": ""
    },
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "flexEnabled": true,
    "dependencies": {
      "minUI5Version": "1.136.0",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.fe.templates": {}
      }
    },
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "sap.stammtisch.ui.app.i18n.i18n"
        }
      },
      "": {
        "dataSource": "mainService",
        "preload": true,
        "settings": {
          "operationMode": "Server",
          "autoExpandSelect": true,
          "earlyRequests": true
        }
      },
      "@i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "uri": "i18n/i18n.properties"
      }
    },
    "resources": {
      "css": [
        {
          "uri": "css/customStyles.css"
        }
      ]
    },
    "routing": {
      "config": {},
      "routes": [
        {
          "pattern": ":?query:",
          "name": "StammtischeList",
          "target": "StammtischeList"
        },
        {
          "pattern": "Stammtische({key}):?query:",
          "name": "StammtischeObjectPage",
          "target": "StammtischeObjectPage"
        },
        {
          "pattern": "Stammtische({key})/teilnehmer({key2}):?query:",
          "name": "TeilnehmerObjectPage",
          "target": "TeilnehmerObjectPage"
        }
      ],
      "targets": {
        "StammtischeList": {
          "type": "Component",
          "id": "StammtischeList",
          "name": "sap.fe.templates.ListReport",
          "options": {
            "settings": {
              "contextPath": "/Stammtische",
              "variantManagement": "Page",
              "navigation": {
                "Stammtische": {
                  "detail": {
                    "route": "StammtischeObjectPage"
                  }
                }
              },
              "controlConfiguration": {
                "@com.sap.vocabularies.UI.v1.LineItem": {
                  "tableSettings": {
                    "type": "ResponsiveTable"
                  }
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        },
        "StammtischeObjectPage": {
          "type": "Component",
          "id": "StammtischeObjectPage",
          "name": "sap.fe.templates.ObjectPage",
          "options": {
            "settings": {
              "editableHeaderContent": false,
              "contextPath": "/Stammtische",
              "navigation": {
                "teilnehmer": {
                  "detail": {
                    "route": "TeilnehmerObjectPage"
                  }
                }
              },
              "actions": {
                "AIChatActionStammtischOP": {
                  "press": "sap.stammtisch.ui.app.ext.CustomActions.onToggleChatSidePanel",
                  "text": "{{btnTextAIChat}}",
                  "visible": true,
                  "enabled": true,
                  "requiresSelection": false
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        },
        "TeilnehmerObjectPage": {
          "type": "Component",
          "id": "TeilnehmerObjectPage",
          "name": "sap.fe.templates.ObjectPage",
          "options": {
            "settings": {
              "editableHeaderContent": false,
              "contextPath": "/Stammtische/teilnehmer",
              "actions": {
                "AIChatActionTeilnehmerOP": {
                  "press": "sap.stammtisch.ui.app.ext.CustomActions.onOpenAIChatDialog",
                  "text": "{{btnTextAIChat}}",
                  "visible": true,
                  "enabled": true,
                  "requiresSelection": false
                }
              }
            }
          },
          "extends": {
            "controller": {
              "name": "sap.stammtisch.ui.app.ext.CustomActions",
              "namespace": "sap.stammtisch.ui.app.ext"
            }
          }
        }
      }
    }
  },
  "sap.fiori": {
    "registrationIds": [],
    "archeType": "transactional"
  }
}
</file>

<file path="app/webapp/test/flpSandbox.html">
<!DOCTYPE HTML>
<html lang="en">
<!-- Copyright (c) 2015 SAP AG, All Rights Reserved -->
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{appTitle}}</title>

    <!-- Bootstrap the unified shell in sandbox mode for standalone usage.

         The renderer is specified in the global Unified Shell configuration object "sap-ushell-config".

         The fiori2 renderer will render the shell header allowing, for instance,
         testing of additional application setting buttons.

         The navigation target resolution service is configured in a way that the empty URL hash is
         resolved to our own application.

         This example uses relative path references for the SAPUI5 resources and test-resources;
         it might be necessary to adapt them depending on the target runtime platform.
         The sandbox platform is restricted to development or demo use cases and must NOT be used
         for productive scenarios.
    -->
    <script type="text/javascript">
        window["sap-ushell-config"] = {
            defaultRenderer: "fiori2",
            bootstrapPlugins: {
                "RuntimeAuthoringPlugin": {
                    component: "sap.ushell.plugins.rta",
                    config: {
                        validateAppVersion: false
                    }
                }
            },
            renderers: {
                fiori2: {
                    componentData: {
                        config: {
                            search: "hidden",
                            enableSearch: false
                        }
                    }
                }
            },
            applications: {
                "sapstammtischuiapp-tile": {
                    title: "Stammtisch Verwaltung",
                    description: "SAP Stammtisch",
                    additionalInformation: "SAPUI5.Component=sap.stammtisch.ui.app",
                    applicationType: "URL",
                    url: "../"
                }
            }
        };
    </script>

    <script src="https://sapui5.hana.ondemand.com/1.136.0/test-resources/sap/ushell/bootstrap/sandbox.js" id="sap-ushell-bootstrap"></script>
    <!-- Bootstrap the UI5 core library. 'data-sap-ui-frameOptions="allow"'' is a NON-SECURE setting for test environments -->
    <script id="sap-ui-bootstrap"
        src="https://sapui5.hana.ondemand.com/1.136.0/resources/sap-ui-core.js"
        data-sap-ui-libs=""
        data-sap-ui-async="true"
        data-sap-ui-preload="async"
        data-sap-ui-theme="sap_horizon"
        data-sap-ui-compatVersion="edge"
        data-sap-ui-language="en"
        data-sap-ui-resourceroots='{"sap.stammtisch.ui.app": "../"}'
        data-sap-ui-frameOptions="allow"
        data-sap-ui-flexibilityServices='[{"connector": "LocalStorageConnector"}]'>
    </script>
    <script>
        sap.ui.getCore().attachInit(function () {
            sap.ushell.Container.createRenderer().placeAt("content");
        });
    </script>
</head>

<!-- UI Content -->

<body class="sapUiBody" id="content">
</body>

</html>
</file>

<file path="app/webapp/test/integration/FirstJourney.js">
sap.ui.define([
    "sap/ui/test/opaQunit"
], function (opaTest) {
    "use strict";

    var Journey = {
        run: function() {
            QUnit.module("First journey");

            opaTest("Start application", function (Given, When, Then) {
                Given.iStartMyApp();

                Then.onTheStammtischeList.iSeeThisPage();

            });


            opaTest("Navigate to ObjectPage", function (Given, When, Then) {
                // Note: this test will fail if the ListReport page doesn't show any data
                
                When.onTheStammtischeList.onFilterBar().iExecuteSearch();
                
                Then.onTheStammtischeList.onTable().iCheckRows();

                When.onTheStammtischeList.onTable().iPressRow(0);
                Then.onTheStammtischeObjectPage.iSeeThisPage();

            });

            opaTest("Teardown", function (Given, When, Then) { 
                // Cleanup
                Given.iTearDownMyApp();
            });
        }
    }

    return Journey;
});
</file>

<file path="app/webapp/test/integration/opaTests.qunit.html">
<!DOCTYPE html>
<html>
<head>
    <title>Integration tests</title>
    <meta charset="utf-8">

    <script id="sap-ui-bootstrap"
            src="/resources/sap-ui-core.js"
            data-sap-ui-theme='sap_fiori_3'
            data-sap-ui-resourceroots='{
                "sap.stammtisch.ui.app": "../../"
            }'
            data-sap-ui-animation="false"
            data-sap-ui-compatVersion="edge"
            data-sap-ui-async="true">
    </script>

    <link rel="stylesheet" type="text/css" href="/resources/sap/ui/thirdparty/qunit-2.css">

    <script src="/resources/sap/ui/thirdparty/qunit-2.js"></script>
    <script src="/resources/sap/ui/qunit/qunit-junit.js"></script>

    <script src="opaTests.qunit.js"></script>

</head>
<body>
    <div id="qunit"></div>
    <div id="qunit-fixture"></div>
</body>
</html>
</file>

<file path="app/webapp/test/integration/opaTests.qunit.js">
sap.ui.require(
    [
        'sap/fe/test/JourneyRunner',
        'sap/stammtisch/ui/app/test/integration/FirstJourney',
		'sap/stammtisch/ui/app/test/integration/pages/StammtischeList',
		'sap/stammtisch/ui/app/test/integration/pages/StammtischeObjectPage',
		'sap/stammtisch/ui/app/test/integration/pages/TeilnehmerObjectPage'
    ],
    function(JourneyRunner, opaJourney, StammtischeList, StammtischeObjectPage, TeilnehmerObjectPage) {
        'use strict';
        var JourneyRunner = new JourneyRunner({
            // start index.html in web folder
            launchUrl: sap.ui.require.toUrl('sap/stammtisch/ui/app') + '/index.html'
        });

       
        JourneyRunner.run(
            {
                pages: { 
					onTheStammtischeList: StammtischeList,
					onTheStammtischeObjectPage: StammtischeObjectPage,
					onTheTeilnehmerObjectPage: TeilnehmerObjectPage
                }
            },
            opaJourney.run
        );
    }
);
</file>

<file path="app/webapp/test/integration/pages/StammtischeList.js">
sap.ui.define(['sap/fe/test/ListReport'], function(ListReport) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ListReport(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'StammtischeList',
            contextPath: '/Stammtische'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/integration/pages/StammtischeObjectPage.js">
sap.ui.define(['sap/fe/test/ObjectPage'], function(ObjectPage) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ObjectPage(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'StammtischeObjectPage',
            contextPath: '/Stammtische'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/integration/pages/TeilnehmerObjectPage.js">
sap.ui.define(['sap/fe/test/ObjectPage'], function(ObjectPage) {
    'use strict';

    var CustomPageDefinitions = {
        actions: {},
        assertions: {}
    };

    return new ObjectPage(
        {
            appId: 'sap.stammtisch.ui.app',
            componentId: 'TeilnehmerObjectPage',
            contextPath: '/Stammtische/teilnehmer'
        },
        CustomPageDefinitions
    );
});
</file>

<file path="app/webapp/test/testsuite.qunit.html">
<!DOCTYPE html>
<html>
  <head>
    <title>QUnit test suite</title>
    <script src="../resources/sap/ui/qunit/qunit-redirect.js"></script>
    <script src="testsuite.qunit.js" data-sap-ui-testsuite></script>
  </head>
  <body></body>
</html>
</file>

<file path="app/webapp/test/testsuite.qunit.js">
window.suite = function() {
    'use strict';

    // eslint-disable-next-line
    var oSuite = new parent.jsUnitTestSuite(),
    
    sContextPath = location.pathname.substring(0, location.pathname.lastIndexOf('/') + 1);
    oSuite.addTestPage(sContextPath + 'integration/opaTests.qunit.html');

    return oSuite;
};
</file>

<file path="db/data/sap.stammtisch-Praesentatoren.csv">
ID;name;email;linkedin
p1;Max Mustermann;max@example.com;linkedin.com/in/maxmustermann
p2;Erika Beispiel;erika@example.com;linkedin.com/in/erikabeispiel
</file>

<file path="db/data/sap.stammtisch-Stammtische.csv">
ID;thema;datum;ort;praesentator_ID
a1b2c3d4-e5f6-7890-1234-567890abcdef;Einführung in CAP;2023-10-26T19:00:00Z;SAP Walldorf WDF01;p1
b2c3d4e5-f6a7-8901-2345-67890abcdef0;AI mit SAP BTP;2023-11-15T18:30:00Z;Online;p2
</file>

<file path="db/schema.cds">
namespace sap.stammtisch; 

using { cuid, managed, temporal } from '@sap/cds/common';

entity Praesentatoren : cuid, managed {
    name          : String(100) not null;
    email         : String;
    linkedin      : String;
    stammtische   : Composition of many Stammtische
                      on stammtische.praesentator = $self;
}

entity Stammtische : cuid, managed { // cuid, managed und temporal für Standardfelder
    key ID            : UUID @(Core.Computed : true); // Auto-generierte UUID
    thema         : String(255) not null;
    datum         : DateTime not null;
    ort           : String(100);
    notizen       : LargeString;
    praesentator  : Association to Praesentatoren;
    teilnehmer    : Composition of many Teilnehmer
                      on teilnehmer.stammtisch = $self;
}

entity Teilnehmer : cuid, managed {
    key ID            : UUID @(Core.Computed : true);
    name          : String(100) not null;
    email         : String;
    stammtisch    : Association to Stammtische;
}
</file>

<file path="eslint.config.mjs">
import cds from '@sap/cds/eslint.config.mjs'
export default [ ...cds.recommended ]
</file>

<file path="srv/agents/enhanced-agent.js">
// srv/agents/enhanced-agent.js
/**
 * Enhanced AI Agent System basierend auf Anthropic's "Building Effective Agents"
 * Implementiert: Routing, Prompt Chaining, Orchestrator-Workers, Evaluator-Optimizer
 */

const DatabaseTools = require('../tools/database-tools');
const MarkdownConverter = require('../utils/markdown-converter');

class EnhancedAIAgent {
  
  constructor() {
    this.dbTools = new DatabaseTools();
    this.executionHistory = [];
    this.currentPlan = null;
  }

  /**
   * ROUTING PATTERN: Intelligente Klassifikation der Benutzeranfrage
   */
  async classifyRequest(prompt) {
    console.log('=== ROUTING: Request Classification ===');
    
    const classificationPrompt = `Du bist ein Experte für die StammtischAI-Anwendung und klassifizierst Benutzeranfragen.

VERFÜGBARE DATABASE TOOLS:
1. "get_stammtische" - Alle Stammtische abrufen (mit limit/offset)
2. "get_stammtisch_by_id" - Einzelnen Stammtisch mit Details abrufen (braucht ID)
3. "search_stammtische" - Nach Stammtischen suchen (braucht Suchbegriff)
4. "get_praesentatoren" - Alle Präsentatoren abrufen
5. "get_teilnehmer" - Teilnehmer für einen Stammtisch abrufen (braucht stammtischId)
6. "get_stammtisch_statistics" - Umfassende Statistiken über alle Daten
7. "get_upcoming_stammtische" - Kommende Stammtische abrufen

KLASSIFIKATIONS-KATEGORIEN:

**personal_chat** - Persönliche/allgemeine Fragen - KEINE Tools nötig
- Keywords: "wie heißt", "wer bist", "hallo", "hi", "danke", "guten tag", "wie geht"
- Beispiele:
  * "Wie heißt du?" → Persönliche Vorstellung
  * "Wer bist du?" → Agent-Identität erklären
  * "Hallo" → Begrüßung
  * "Danke" → Höflichkeitsantwort

**help_task** - Hilfe zur Anwendung - KEINE Tools nötig
- Keywords: "hilfe", "help", "wie funktioniert", "anleitung", "was kann", "wie bediene"
- Beispiele:
  * "Wie funktioniert die Anwendung?"
  * "Was kannst du alles?"
  * "Hilfe bei der Navigation"

**simple_query** - Braucht GENAU EIN Tool für StammtischAI-Daten
- Keywords: "zeige", "liste", "alle", "wie viele", "statistik", "anzahl", "kommend", "nächst", "präsentator"
- Beispiele: 
  * "Zeige mir alle Stammtische" → get_stammtische
  * "Wie viele Events haben wir?" → get_stammtisch_statistics  
  * "Welche Präsentatoren gibt es?" → get_praesentatoren
  * "Kommende Stammtische?" → get_upcoming_stammtische

**search_task** - Spezifisch für Suche in StammtischAI-Daten
- Keywords: "suche", "finde", "search", "wo", "welche" + Suchbegriff
- Beispiele:
  * "Suche nach CAP-Workshops" → search_stammtische
  * "Finde Online-Events" → search_stammtische
  * "Wo sind die JavaScript Stammtische?" → search_stammtische

**statistical_task** - Braucht Statistiken + Analyse/Berechnung
- Keywords: "statistik", "analyse", "auswertung", "trends", "vergleich", "performance"
- Beispiele:
  * "Analysiere unsere Event-Performance" → get_stammtisch_statistics + Analyse
  * "Zeige mir Trends der letzten Monate" → get_stammtisch_statistics + get_stammtische
  * "Welche Orte sind am beliebtesten?" → get_stammtisch_statistics + Auswertung

**complex_analysis** - Braucht MEHRERE Tools + Orchestration
- Kombination verschiedener Datenquellen
- Beispiele:
  * "Erstelle einen Bericht über Stammtische und deren Teilnehmer" → get_stammtische + get_teilnehmer + get_praesentatoren
  * "Analysiere alle Daten und gib Empfehlungen" → mehrere Tools + Orchestration
  * "Vergleiche vergangene und kommende Events" → get_stammtische + get_upcoming_stammtische + Analyse

WICHTIG: Wenn die Frage NICHTS mit StammtischAI-Daten zu tun hat, wähle "personal_chat" oder "help_task"!

BENUTZERANFRAGE: "${prompt}"

Analysiere die Anfrage und klassifiziere sie:

<classification>
{
  "category": "kategorie_name",
  "confidence": 0.9,
  "reasoning": "Detaillierte Begründung: Welche Keywords erkannt, warum KEINE Tools bei personal_chat/help_task",
  "suggested_tools": ["tool1", "tool2"],
  "parameters": {"key": "value"},
  "complexity_level": "low/medium/high"
}
</classification>`;

    try {
      const { OrchestrationClient } = await import('@sap-ai-sdk/orchestration');
      const client = new OrchestrationClient({
        llm: { model_name: "gpt-4" },
        templating: { template: [{ role: 'user', content: '{{?user_prompt}}' }] }
      });

      const response = await client.chatCompletion({
        inputParams: { user_prompt: classificationPrompt },
        params: { max_tokens_to_sample: 600, temperature: 0.1 }
      });

      const classificationText = response.getContent();
      const match = classificationText.match(/<classification>([\s\S]*?)<\/classification>/);
      
      if (match) {
        const classification = JSON.parse(match[1].trim());
        console.log('Classification Result:', classification);
        
        // Validiere die Klassifikation
        return this.validateClassification(classification, prompt);
      }
    } catch (error) {
      console.error('Classification failed:', error);
    }

    // Fallback zu verbesserter Klassifikation
    return this.enhancedFallbackClassification(prompt);
  }

  /**
   * Validiert und korrigiert die AI-Klassifikation falls nötig
   */
  validateClassification(classification, prompt) {
    const validCategories = ['personal_chat', 'help_task', 'simple_query', 'search_task', 'statistical_task', 'complex_analysis'];
    
    // Prüfe ob Kategorie gültig ist
    if (!validCategories.includes(classification.category)) {
      console.warn('Invalid category detected, using fallback');
      return this.enhancedFallbackClassification(prompt);
    }

    // Prüfe Konsistenz: personal_chat und help_task sollten KEINE Tools haben
    if ((classification.category === 'personal_chat' || classification.category === 'help_task') && 
        classification.suggested_tools?.length > 0) {
      console.log('Correcting personal_chat/help_task to have no tools');
      classification.suggested_tools = [];
      classification.parameters = {};
    }

    // Prüfe Konsistenz: simple_query sollte nur 1 Tool vorschlagen
    if (classification.category === 'simple_query' && classification.suggested_tools?.length > 1) {
      console.log('Correcting simple_query to use only first tool');
      classification.suggested_tools = [classification.suggested_tools[0]];
    }

    // Prüfe ob search_task auch wirklich search_stammtische verwendet
    if (classification.category === 'search_task' && 
        !classification.suggested_tools?.includes('search_stammtische')) {
      console.log('Correcting search_task to use search_stammtische');
      classification.suggested_tools = ['search_stammtische'];
    }

    return classification;
  }

  /**
   * Verbesserte Fallback-Klassifikation mit Tool-Integration
   */
  enhancedFallbackClassification(prompt) {
    const lower = prompt.toLowerCase();
    
    // Personal/Chat Pattern (höchste Priorität für persönliche Fragen)
    if (lower.includes('wie heißt') || lower.includes('wer bist') || lower.includes('hallo') || 
        lower.includes('hi') || lower.includes('danke') || lower.includes('guten tag') ||
        lower.includes('wie geht') || lower.match(/^(hallo|hi|hey|moin|servus)$/)) {
      return {
        category: 'personal_chat',
        confidence: 0.95,
        reasoning: 'Persönliche/Begrüßungs-Keywords erkannt - keine Tools nötig',
        suggested_tools: [],
        parameters: {},
        complexity_level: 'low'
      };
    }

    // Hilfe-Pattern
    if (lower.includes('hilfe') || lower.includes('help') || lower.includes('wie funktioniert') || 
        lower.includes('was kannst') || lower.includes('anleitung')) {
      return {
        category: 'help_task',
        confidence: 0.9,
        reasoning: 'Hilfe-Keywords erkannt - keine Tools nötig',
        suggested_tools: [],
        parameters: {},
        complexity_level: 'low'
      };
    }

    // Suche-Pattern
    if (lower.includes('suche') || lower.includes('finde') || lower.includes('search')) {
      const searchQuery = this.extractSearchQuery(prompt);
      return {
        category: 'search_task',
        confidence: 0.8,
        reasoning: 'Suchbegriff erkannt',
        suggested_tools: ['search_stammtische'],
        parameters: searchQuery ? { query: searchQuery } : {},
        complexity_level: 'low'
      };
    }

    // Statistik/Analyse-Pattern
    if (lower.includes('statistik') || lower.includes('analyse') || lower.includes('trends') || 
        lower.includes('auswertung') || lower.includes('performance') || lower.includes('vergleich')) {
      
      // Prüfe ob es komplex ist (mehrere Datenquellen)
      const isComplex = (lower.includes('bericht') || lower.includes('empfehlung') || 
                        lower.includes('vergleiche') || lower.includes('alle daten'));
      
      return {
        category: isComplex ? 'complex_analysis' : 'statistical_task',
        confidence: 0.7,
        reasoning: isComplex ? 'Komplexe Analyse mit mehreren Datenquellen' : 'Statistische Auswertung',
        suggested_tools: isComplex ? ['get_stammtisch_statistics', 'get_stammtische'] : ['get_stammtisch_statistics'],
        parameters: {},
        complexity_level: isComplex ? 'high' : 'medium'
      };
    }

    // Prüfe ob es überhaupt StammtischAI-relevante Keywords gibt
    const stammtischKeywords = ['stammtisch', 'event', 'events', 'präsentator', 'teilnehmer', 
                               'workshop', 'veranstaltung', 'zeige', 'liste', 'alle'];
    
    const hasStammtischKeywords = stammtischKeywords.some(keyword => lower.includes(keyword));
    
    if (!hasStammtischKeywords) {
      // Wenn keine StammtischAI-Keywords gefunden → personal_chat
      return {
        category: 'personal_chat',
        confidence: 0.8,
        reasoning: 'Keine StammtischAI-relevanten Keywords gefunden - allgemeine Frage',
        suggested_tools: [],
        parameters: {},
        complexity_level: 'low'
      };
    }

    // Simple Query Pattern (nur wenn StammtischAI-Keywords vorhanden)
    const identifiedTool = this.identifyTool(prompt);
    const parameters = this.extractParameters(prompt, identifiedTool);
    
    return {
      category: 'simple_query',
      confidence: 0.6,
      reasoning: `StammtischAI-Tool identifiziert: ${identifiedTool}`,
      suggested_tools: [identifiedTool],
      parameters,
      complexity_level: 'low'
    };
  }

  /**
   * ORCHESTRATOR-WORKERS PATTERN: Komplexe Tasks in Subtasks aufteilen
   */
  async orchestrateComplexTask(prompt) {
    console.log('=== ORCHESTRATOR: Planning Complex Task ===');
    
    const planningPrompt = `Du bist ein Task-Orchestrator für die StammtischAI Anwendung.
Analysiere diese komplexe Anfrage und teile sie in konkrete Subtasks auf:

VERFÜGBARE TOOLS:
- get_stammtische: Alle Stammtische abrufen
- search_stammtische: Nach Stammtischen suchen  
- get_stammtisch_statistics: Statistiken generieren
- get_praesentatoren: Präsentatoren-Liste
- get_upcoming_stammtische: Kommende Events

ANFRAGE: ${prompt}

Erstelle einen Ausführungsplan:

<analysis>
Analyse der Anfrage und benötigte Schritte
</analysis>

<plan>
[
  {
    "step": 1,
    "action": "tool_name",
    "parameters": {"param": "value"},
    "purpose": "Warum dieser Schritt nötig ist"
  },
  {
    "step": 2, 
    "action": "analyze_results",
    "purpose": "Ergebnisse auswerten"
  }
]
</plan>`;

    try {
      const { OrchestrationClient } = await import('@sap-ai-sdk/orchestration');
      const client = new OrchestrationClient({
        llm: { model_name: "gpt-4" },
        templating: { template: [{ role: 'user', content: '{{?user_prompt}}' }] }
      });

      const response = await client.chatCompletion({
        inputParams: { user_prompt: planningPrompt },
        params: { max_tokens_to_sample: 1000, temperature: 0.2 }
      });

      const content = response.getContent();
      const analysisMatch = content.match(/<analysis>([\s\S]*?)<\/analysis>/);
      const planMatch = content.match(/<plan>([\s\S]*?)<\/plan>/);

      if (analysisMatch && planMatch) {
        const analysis = analysisMatch[1].trim();
        const plan = JSON.parse(planMatch[1].trim());
        
        console.log('Analysis:', analysis);
        console.log('Execution Plan:', plan);
        
        this.currentPlan = { analysis, steps: plan };
        return await this.executePlan(plan);
      }
    } catch (error) {
      console.error('Orchestration failed:', error);
    }

    return null;
  }

  /**
   * Plan-Execution mit Workers
   */
  async executePlan(steps) {
    console.log('=== WORKERS: Executing Plan Steps ===');
    
    const results = [];
    
    for (const step of steps) {
      console.log(`Executing Step ${step.step}: ${step.purpose}`);
      
      if (step.action && step.action !== 'analyze_results') {
        try {
          const toolResult = await this.dbTools.executeTool(step.action, step.parameters || {});
          results.push({
            step: step.step,
            action: step.action,
            result: toolResult,
            purpose: step.purpose
          });
          console.log(`Step ${step.step} completed successfully`);
        } catch (error) {
          console.error(`Step ${step.step} failed:`, error);
          results.push({
            step: step.step,
            action: step.action,
            error: error.message,
            purpose: step.purpose
          });
        }
      }
    }
    
    return results;
  }

  /**
   * PROMPT CHAINING PATTERN: Schrittweise Verarbeitung
   */
  async chainedProcessing(prompt, toolResults) {
    console.log('=== PROMPT CHAINING: Sequential Processing ===');
    
    const steps = [
      {
        name: 'data_analysis',
        prompt: `Analysiere die Daten aus den Tool-Ergebnissen und identifiziere die wichtigsten Erkenntnisse:

TOOL-ERGEBNISSE:
${JSON.stringify(toolResults, null, 2)}

BENUTZERANFRAGE: ${prompt}

Gib eine strukturierte Analyse zurück:
<insights>
Die wichtigsten Erkenntnisse aus den Daten
</insights>`
      },
      {
        name: 'response_generation', 
        prompt: `Basierend auf den Insights, erstelle eine benutzerfreundliche Antwort:

ERKENNTNISSE: {previous_result}

BENUTZERANFRAGE: ${prompt}

Erstelle eine Markdown-formatierte Antwort:
<response>
Benutzerfreundliche Antwort mit Markdown-Formatierung
</response>`
      }
    ];

    let previousResult = '';
    
    for (const step of steps) {
      const stepPrompt = step.prompt.replace('{previous_result}', previousResult);
      
      try {
        const { OrchestrationClient } = await import('@sap-ai-sdk/orchestration');
        const client = new OrchestrationClient({
          llm: { model_name: "gpt-4" },
          templating: { template: [{ role: 'user', content: '{{?user_prompt}}' }] }
        });

        const response = await client.chatCompletion({
          inputParams: { user_prompt: stepPrompt },
          params: { max_tokens_to_sample: 2000, temperature: 0.3 }
        });

        const content = response.getContent();
        
        if (step.name === 'data_analysis') {
          const insightsMatch = content.match(/<insights>([\s\S]*?)<\/insights>/);
          previousResult = insightsMatch ? insightsMatch[1].trim() : content;
        } else if (step.name === 'response_generation') {
          const responseMatch = content.match(/<response>([\s\S]*?)<\/response>/);
          return responseMatch ? responseMatch[1].trim() : content;
        }

        console.log(`Chain Step ${step.name} completed`);
        
      } catch (error) {
        console.error(`Chain step ${step.name} failed:`, error);
        return `Fehler bei der Verarbeitung: ${error.message}`;
      }
    }

    return previousResult;
  }

  /**
   * EVALUATOR-OPTIMIZER PATTERN: Selbst-Evaluation und Verbesserung
   */
  async evaluateAndOptimize(response, originalPrompt, toolResults) {
    console.log('=== EVALUATOR-OPTIMIZER: Self-Evaluation ===');
    
    const evaluationPrompt = `Evaluiere diese AI-Antwort auf Qualität, Vollständigkeit und Benutzerfreundlichkeit:

ORIGINAL-ANFRAGE: ${originalPrompt}

VERFÜGBARE DATEN: ${JSON.stringify(toolResults?.slice(0, 2), null, 2)}

GENERIERTE ANTWORT: ${response}

Bewerte die Antwort:
<evaluation>
{
  "quality_score": 0.8,
  "completeness_score": 0.9, 
  "user_friendliness_score": 0.7,
  "needs_improvement": true/false,
  "specific_issues": ["Liste der Probleme"],
  "suggestions": ["Verbesserungsvorschläge"]
}
</evaluation>`;

    try {
      const { OrchestrationClient } = await import('@sap-ai-sdk/orchestration');
      const client = new OrchestrationClient({
        llm: { model_name: "gpt-4" },
        templating: { template: [{ role: 'user', content: '{{?user_prompt}}' }] }
      });

      const evalResponse = await client.chatCompletion({
        inputParams: { user_prompt: evaluationPrompt },
        params: { max_tokens_to_sample: 800, temperature: 0.1 }
      });

      const evalContent = evalResponse.getContent();
      const evalMatch = evalContent.match(/<evaluation>([\s\S]*?)<\/evaluation>/);
      
      if (evalMatch) {
        const evaluation = JSON.parse(evalMatch[1].trim());
        console.log('Evaluation Result:', evaluation);
        
        // Wenn Verbesserung nötig, optimiere die Antwort
        if (evaluation.needs_improvement) {
          return await this.optimizeResponse(response, evaluation, originalPrompt);
        }
      }
    } catch (error) {
      console.error('Evaluation failed:', error);
    }

    return response; // Rückgabe der ursprünglichen Antwort falls Evaluation fehlschlägt
  }

  /**
   * Response-Optimierung basierend auf Evaluation
   */
  async optimizeResponse(originalResponse, evaluation, originalPrompt) {
    console.log('=== OPTIMIZER: Improving Response ===');
    
    const optimizationPrompt = `Verbessere diese AI-Antwort basierend auf der Evaluation:

ORIGINAL-ANTWORT: ${originalResponse}

EVALUATION: ${JSON.stringify(evaluation, null, 2)}

BENUTZERANFRAGE: ${originalPrompt}

Erstelle eine verbesserte Version, die die identifizierten Probleme behebt:
<improved_response>
Verbesserte Antwort hier
</improved_response>`;

    try {
      const { OrchestrationClient } = await import('@sap-ai-sdk/orchestration');
      const client = new OrchestrationClient({
        llm: { model_name: "gpt-4" },
        templating: { template: [{ role: 'user', content: '{{?user_prompt}}' }] }
      });

      const response = await client.chatCompletion({
        inputParams: { user_prompt: optimizationPrompt },
        params: { max_tokens_to_sample: 2500 }
      });

      const content = response.getContent();
      const improvedMatch = content.match(/<improved_response>([\s\S]*?)<\/improved_response>/);
      
      if (improvedMatch) {
        console.log('Response successfully optimized');
        return improvedMatch[1].trim();
      }
    } catch (error) {
      console.error('Optimization failed:', error);
    }

    return originalResponse;
  }

  /**
   * MAIN AGENT PROCESSING: Koordiniert alle Patterns
   */
  async processRequest(prompt) {
    console.log('=== ENHANCED AI AGENT: Processing Request ===');
    
    try {
      // Step 1: ROUTING - Klassifiziere die Anfrage
      const classification = await this.classifyRequest(prompt);
      
      let toolResults = [];
      let response = '';

      // Step 2: Wähle das passende Pattern basierend auf Klassifikation
      switch (classification.category) {
        case 'personal_chat':
          // Persönliche Fragen ohne Tools
          response = await this.generatePersonalResponse(prompt);
          break;
          
        case 'simple_query':
          // Einfache Tool-Ausführung
          toolResults = await this.handleSimpleQuery(prompt);
          response = await this.generateSimpleResponse(prompt, toolResults);
          break;
          
        case 'complex_analysis':
          // ORCHESTRATOR-WORKERS Pattern
          toolResults = await this.orchestrateComplexTask(prompt);
          response = await this.chainedProcessing(prompt, toolResults);
          break;
          
        case 'search_task':
          // Optimierte Such-Pipeline
          toolResults = await this.handleSearchTask(prompt);
          response = await this.generateSearchResponse(prompt, toolResults);
          break;
          
        case 'statistical_task':
          // Statistik-Pipeline
          toolResults = await this.handleStatisticalTask(prompt);
          response = await this.chainedProcessing(prompt, toolResults);
          break;
          
        case 'help_task':
          // Direkte Hilfe ohne Tools
          response = await this.generateHelpResponse(prompt);
          break;
          
        default:
          // Fallback zu Standard-Verarbeitung
          toolResults = await this.handleSimpleQuery(prompt);
          response = await this.generateSimpleResponse(prompt, toolResults);
      }

      // Step 3: EVALUATOR-OPTIMIZER - Verbessere die Antwort
      if (toolResults.length > 0) {
        response = await this.evaluateAndOptimize(response, prompt, toolResults);
      }

      // Step 4: Konvertiere zu HTML für bessere Darstellung
      const htmlResponse = MarkdownConverter.convertForStammtischAI(response);

      // Step 5: Protokolliere die Execution
      this.logExecution({
        prompt,
        classification,
        toolsUsed: toolResults.length,
        pattern: this.getPatternUsed(classification.category),
        success: true
      });

      return htmlResponse;

    } catch (error) {
      console.error('Enhanced Agent processing failed:', error);
      
      this.logExecution({
        prompt,
        classification: { category: 'error' },
        error: error.message,
        success: false
      });

      return this.generateErrorResponse(error);
    }
  }

  /**
   * Pattern-spezifische Handler
   */
  async handleSimpleQuery(prompt) {
    const toolName = this.identifyTool(prompt);
    const parameters = this.extractParameters(prompt, toolName);
    
    if (toolName) {
      const result = await this.dbTools.executeTool(toolName, parameters);
      return [result];
    }
    return [];
  }

  async handleSearchTask(prompt) {
    const searchQuery = this.extractSearchQuery(prompt);
    if (searchQuery) {
      const result = await this.dbTools.executeTool('search_stammtische', { query: searchQuery });
      return [result];
    }
    return [];
  }

  async handleStatisticalTask(prompt) {
    const result = await this.dbTools.executeTool('get_stammtisch_statistics', {});
    return [result];
  }

  /**
   * Response-Generatoren
   */
  async generatePersonalResponse(prompt) {
    const lower = prompt.toLowerCase();
    
    if (lower.includes('wie heißt') || lower.includes('wer bist')) {
      return `## 👋 Hallo! Ich bin Ihr StammtischAI Assistant

Ich bin ein intelligenter AI-Agent, der Ihnen bei der **StammtischAI-Anwendung** hilft.

**Was ich kann:**
- 📊 **Daten abrufen** aus Ihrer Stammtisch-Datenbank
- 🔍 **Suchen** - nach Events, Präsentatoren, Themen  
- 📈 **Statistiken** - Live-Auswertungen und Trends
- 🤖 **Intelligente Analyse** - komplexe Fragen beantworten

**Probieren Sie zum Beispiel:**
- "Wie viele Stammtische haben wir?"
- "Suche nach CAP-Workshops"
- "Zeige mir kommende Events"

Wie kann ich Ihnen heute helfen?`;
    }
    
    if (lower.includes('hallo') || lower.includes('hi') || lower.includes('guten tag')) {
      return `## 👋 Hallo und willkommen bei StammtischAI!

Schön, dass Sie da sind! Ich bin Ihr AI-Assistant und helfe Ihnen gerne bei allen Fragen rund um Ihre Stammtisch-Events.

**Womit kann ich Ihnen helfen?**
- Events und Teilnehmer verwalten
- Statistiken und Auswertungen
- Suche nach bestimmten Veranstaltungen
- Allgemeine Fragen zur Anwendung

Stellen Sie einfach Ihre Frage! 😊`;
    }
    
    if (lower.includes('danke')) {
      return `## 😊 Gern geschehen!

Es freut mich, dass ich Ihnen helfen konnte. Falls Sie weitere Fragen zu Ihren Stammtisch-Events haben, bin ich jederzeit für Sie da!

**Noch Fragen?** Fragen Sie einfach nach Statistiken, suchen Sie nach Events oder lassen Sie sich die kommenden Veranstaltungen anzeigen.`;
    }
    
    if (lower.includes('wie geht')) {
      return `## 🤖 Mir geht es bestens, danke der Nachfrage!

Als AI-Agent bin ich rund um die Uhr bereit, Ihnen bei der **StammtischAI-Anwendung** zu helfen.

**Aktueller Status:**
- ✅ Datenbankverbindung aktiv
- ✅ Alle Tools funktionsfähig  
- ✅ Bereit für Ihre Anfragen

Wie kann ich Ihnen mit Ihren Stammtisch-Daten helfen?`;
    }
    
    // Standard persönliche Antwort
    return `## 🤖 StammtischAI Assistant

Ich bin Ihr persönlicher AI-Agent für die StammtischAI-Anwendung. 

**Meine Aufgabe:** Ihnen bei der Verwaltung und Analyse Ihrer Stammtisch-Events zu helfen.

**Was möchten Sie wissen?**
- Informationen über Events und Teilnehmer
- Statistiken und Trends  
- Suche nach bestimmten Veranstaltungen
- Hilfe zur Anwendung

Stellen Sie mir einfach eine Frage! 😊`;
  }

  async generateSimpleResponse(prompt, toolResults) {
    if (!toolResults.length) return "Keine Daten gefunden.";
    
    const data = toolResults[0].success ? toolResults[0].data : null;
    if (!data) return "Fehler beim Abrufen der Daten.";
    
    return `Basierend auf den aktuellen Daten: ${JSON.stringify(data, null, 2)}`;
  }

  async generateSearchResponse(prompt, toolResults) {
    if (!toolResults.length || !toolResults[0].success) {
      return "Keine Suchergebnisse gefunden.";
    }
    
    const searchData = toolResults[0].data;
    return `🔍 **Suchergebnisse:**\n\nGefunden: ${searchData.count} Ergebnisse\n\n${JSON.stringify(searchData.results, null, 2)}`;
  }

  async generateHelpResponse(prompt) {
    return `## 🤖 StammtischAI Hilfe

Ich kann Ihnen bei folgenden Aufgaben helfen:

- **Stammtische anzeigen**: "Zeige mir alle Stammtische"
- **Suchen**: "Suche nach CAP-Workshops"  
- **Statistiken**: "Wie viele Events haben wir?"
- **Kommende Events**: "Welche Stammtische sind geplant?"

Wie kann ich Ihnen weiterhelfen?`;
  }

  generateErrorResponse(error) {
    return `❌ **Fehler bei der Verarbeitung**

Es tut mir leid, aber bei der Bearbeitung Ihrer Anfrage ist ein Fehler aufgetreten.

**Was Sie versuchen können:**
- Formulieren Sie Ihre Frage anders
- Versuchen Sie es in einem Moment erneut
- Kontaktieren Sie den Administrator bei anhaltenden Problemen

**Fehlermeldung**: ${error.message}`;
  }

  /**
   * Hilfsmethoden
   */
  identifyTool(prompt) {
    const lower = prompt.toLowerCase();
    if (lower.includes('statistik') || lower.includes('anzahl')) return 'get_stammtisch_statistics';
    if (lower.includes('suche') || lower.includes('finde')) return 'search_stammtische';
    if (lower.includes('kommend') || lower.includes('nächst')) return 'get_upcoming_stammtische';
    if (lower.includes('präsentator')) return 'get_praesentatoren';
    return 'get_stammtische';
  }

  extractParameters(prompt, toolName) {
    if (toolName === 'search_stammtische') {
      const match = prompt.match(/(?:suche|finde).*?(?:nach|for)\s+["']?([^"']+)["']?/i);
      return match ? { query: match[1] } : {};
    }
    return {};
  }

  extractSearchQuery(prompt) {
    const patterns = [
      /(?:suche|finde).*?(?:nach|for)\s+["']?([^"']+)["']?/i,
      /"([^"]+)"/,
      /'([^']+)'/
    ];
    
    for (const pattern of patterns) {
      const match = prompt.match(pattern);
      if (match) return match[1];
    }
    
    return null;
  }

  getPatternUsed(category) {
    const patterns = {
      'simple_query': 'Direct Tool Call',
      'complex_analysis': 'Orchestrator-Workers',
      'search_task': 'Optimized Search',
      'statistical_task': 'Prompt Chaining',
      'help_task': 'Direct Response'
    };
    return patterns[category] || 'Unknown';
  }

  logExecution(details) {
    this.executionHistory.push({
      ...details,
      timestamp: new Date().toISOString()
    });
    
    // Keep last 50 executions
    if (this.executionHistory.length > 50) {
      this.executionHistory = this.executionHistory.slice(-50);
    }
  }

  getPerformanceStats() {
    return {
      totalRequests: this.executionHistory.length,
      successRate: this.executionHistory.filter(e => e.success).length / this.executionHistory.length,
      patternUsage: this.executionHistory.reduce((acc, e) => {
        acc[e.pattern || 'Unknown'] = (acc[e.pattern || 'Unknown'] || 0) + 1;
        return acc;
      }, {}),
      averageToolsUsed: this.executionHistory.reduce((sum, e) => sum + (e.toolsUsed || 0), 0) / this.executionHistory.length
    };
  }
}

module.exports = EnhancedAIAgent;
</file>

<file path="srv/prompts/assistant-prompt.js">
// prompts/assistant-prompt.js
/**
 * System Prompt für den StammtischAI Assistant
 * Hier können Sie den AI-Assistant Prompt zentral verwalten
 */

const SYSTEM_PROMPT = `Du bist ein intelligenter AI-Agent für die SAP CAP Anwendung "StammtischAI", entwickelt mit SAP Cloud Application Programming Model. Du hilfst Benutzern dabei, die Anwendung effektiv zu bedienen und hast direkten Zugriff auf die Datenbank.

## Deine Rolle und Persönlichkeit
- Du bist ein freundlicher, kompetenter SAP-Experte mit Datenbankzugriff
- Du sprichst Deutsch und verwendest SAP-Terminologie korrekt
- Du hilfst proaktiv und gibst strukturierte, datenbasierte Antworten
- Du kennst die Anwendung im Detail und kannst auf Live-Daten zugreifen
- Du bist ein AI-Agent mit Tools - nicht nur ein Chatbot

## Anwendungskontext: StammtischAI

### Zweck der Anwendung
Die StammtischAI-Anwendung verwaltet regelmäßige Fachvorträge und Networking-Events ("Stammtische") mit folgenden Hauptfunktionen:
- Verwaltung von Stammtisch-Events mit Thema, Datum, Ort
- Verwaltung von Präsentatoren mit Kontaktdaten
- Verwaltung von Teilnehmern pro Event
- AI-basierte Unterstützung mit Datenbankzugriff

### Agent-Fähigkeiten
Du kannst direkt auf diese Daten zugreifen:
- **Stammtische**: Alle Events, Details, Suche
- **Präsentatoren**: Referenten-Informationen, Aktivitäten
- **Teilnehmer**: Anmeldungen pro Event
- **Statistiken**: Live-Auswertungen, Trends
- **Kommende Events**: Zukunftsplanung

### Datenmodell
Entitäten mit Live-Zugriff:
1. **Stammtische** (Hauptentität)
   - ID, Thema, Datum, Ort, Notizen
   - Verknüpfung zu einem Präsentator
   - Komposition von Teilnehmern

2. **Präsentatoren**
   - Name, E-Mail, LinkedIn-Profil
   - Können mehrere Stammtische halten

3. **Teilnehmer**
   - Name, E-Mail
   - Zugeordnet zu einem Stammtisch

## Agent-Verhalten

### Datenbasierte Antworten
- **Immer aktuelle Daten verwenden**, wenn verfügbar
- **Konkrete Zahlen und Details** aus der Datenbank nennen
- **Live-Statistiken** bei Bedarf abrufen
- **Spezifische Events** suchen und anzeigen

### Beispiel-Interaktionen

**Benutzer fragt**: "Wie viele Stammtische haben wir?"
**Du antwortest**: 

📊 **Aktuelle Stammtisch-Statistiken** (Live-Daten):

- **Gesamte Stammtische**: 47 Events
- **Aktive Präsentatoren**: 12 Referenten
- **Gesamte Teilnehmer**: 284 Anmeldungen

**Top-Veranstaltungsorte:**
1. SAP Walldorf (23 Events)
2. Online (15 Events)
3. München (9 Events)

**Benutzer fragt**: "Suche nach CAP Workshops"
**Du antwortest**:

🔍 **Suchergebnisse für "CAP Workshops":**

**Gefundene Stammtische (3 Ergebnisse):**

1. **"Einführung in SAP CAP"**
   - 📅 26. Oktober 2023, 19:00
   - 📍 SAP Walldorf WDF01
   - 👤 Max Mustermann

2. **"CAP Best Practices"**
   - 📅 15. November 2023, 18:30
   - 📍 Online
   - 👤 Erika Beispiel

### Kommunikation

#### Antwortstil
- Verwende klare, strukturierte Antworten mit Live-Daten
- Nutze Markdown-Formatierung für bessere Lesbarkeit
- Gib konkrete Schritte und aktuelle Beispiele
- Verwende SAP-Fachbegriffe korrekt
- **Verweise immer auf Datenquelle** bei faktischen Aussagen

#### Hilfebereiche mit Datenzugriff

##### 1. Navigation und Bedienung mit aktuellen Daten

**Navigation in StammtischAI:**
- **Startseite**: List Report mit [AKTUELLE ANZAHL] Stammtischen
- **Nächster Event**: [NÄCHSTES DATUM UND THEMA]
- **Stammtisch öffnen**: Klick auf eine Zeile → Object Page
- **AI Agent**: Ich kann Ihnen Live-Daten zu allem liefern!

##### 2. Datenmanagement mit Beispielen
- Erklärung mit konkreten Daten aus der DB
- Referenz auf bestehende Präsentatoren
- Live-Beispiele von Teilnehmer-Anmeldungen

##### 3. Suchfunktionen mit Ergebnissen
- Smart Filter mit aktuellen Werten
- Live-Suchbeispiele aus der Datenbank
- Export mit tatsächlichen Datenmengen

## Erweiterte Agent-Funktionen

### Proaktive Datenanalyse
- **Trends erkennen**: "Ich sehe, dass Online-Events zunehmen..."
- **Empfehlungen geben**: "Basierend auf den Daten empfehle ich..."
- **Probleme identifizieren**: "Die Teilnehmerzahl ist bei Event X niedrig..."

### Intelligente Suche
- **Fuzzy Search**: Auch bei Tippfehlern helfen
- **Kontextuelle Suche**: Ähnliche Events vorschlagen
- **Multi-Parameter**: Nach Datum, Ort, Thema gleichzeitig suchen

## Wichtige Agent-Regeln

### Daten-Priorität
1. **Live-Daten haben Vorrang** vor allgemeinen Aussagen
2. **Immer Datenquelle angeben**: "Laut aktuellen Datenbank-Daten..."
3. **Bei fehlenden Daten**: Klar kommunizieren was nicht verfügbar ist
4. **Datenqualität**: Auf unvollständige/alte Daten hinweisen

### Fehlerbehandlung
- **Tool-Fehler transparent machen**: "Datenbankzugriff fehlgeschlagen..."
- **Fallback anbieten**: "Ich kann Ihnen stattdessen bei... helfen"
- **Retry vorschlagen**: "Versuchen Sie es in einem Moment erneut"

### Responsivität
- **Schnelle Antworten** bei einfachen Datenabfragen
- **Detaillierte Analysen** bei komplexen Fragen
- **Strukturierte Ausgabe** bei großen Datenmengen

Wenn du spezifische Fragen zur StammtischAI-Anwendung oder deren Daten hast, bin ich hier, um zu helfen! Teile mir mit, welche Informationen du benötigst - ich habe direkten Zugriff auf alle aktuellen Daten.

**Wichtige Agent-Hinweise:**
- Antworte immer höflich und professionell
- Nutze Live-Daten wann immer möglich
- Gib konkrete, umsetzbare Hilfestellungen mit aktuellen Beispielen
- Erkläre SAP-Begriffe für weniger erfahrene Benutzer
- Frage nach, wenn etwas unklar ist
- Bei technischen Problemen: Datenbank-Tools erwähnen
- Verweise bei Agent-Fehlern an den Administrator`;

/**
 * Zusätzliche Prompts für spezielle Situationen
 */
const PROMPTS = {
  // Standard System Prompt
  system: SYSTEM_PROMPT,
  
  // Kurzer Prompt für einfache Fragen
  simple: `Du bist ein SAP-Experte für die StammtischAI-Anwendung. Beantworte Fragen klar und präzise auf Deutsch. Die App verwaltet Stammtisch-Events, Präsentatoren und Teilnehmer mit SAP Fiori Elements UI.`,
  
  // Technical Support Prompt
  technical: `${SYSTEM_PROMPT}

**ZUSÄTZLICH - Technischer Support Modus:**
- Fokus auf technische Probleme und Debugging
- Detaillierte Erklärungen zu CAP, OData, und SAP UI5
- Code-Beispiele und Konfigurationshilfen
- Datenbankverbindung und Performance-Optimierung`,

  // Training Mode für neue Benutzer
  training: `${SYSTEM_PROMPT}

**ZUSÄTZLICH - Trainings-Modus:**
- Besonders ausführliche Erklärungen
- Grundlagen von SAP Fiori Elements erklären
- Schritt-für-Schritt Anleitungen mit Screenshots-Beschreibungen
- Geduldig bei Nachfragen
- Motivation und Ermutigung für neue Benutzer`
};

/**
 * Prompt Builder für verschiedene Kontexte
 */
class PromptBuilder {
  static getPrompt(mode = 'system', userContext = {}) {
    let prompt = PROMPTS[mode] || PROMPTS.system;
    
    // Kontext-spezifische Anpassungen
    if (userContext.currentPage) {
      prompt += `\n\n**AKTUELLER KONTEXT:** Der Benutzer befindet sich auf der "${userContext.currentPage}" Seite.`;
    }
    
    if (userContext.hasError) {
      prompt += `\n\n**FEHLERSITUATION:** Der Benutzer hat möglicherweise ein technisches Problem. Fokussiere auf Problemlösung.`;
    }
    
    return prompt;
  }
  
  static buildPromptWithUserMessage(userMessage, mode = 'system', userContext = {}) {
    const systemPrompt = this.getPrompt(mode, userContext);
    return `${systemPrompt}\n\n**Benutzeranfrage:** ${userMessage}`;
  }
}

module.exports = {
  SYSTEM_PROMPT,
  PROMPTS,
  PromptBuilder
};
</file>

<file path="srv/prompts/prompt-config.json">
{
  "modes": {
    "system": {
      "description": "Standard AI Assistant",
      "maxTokens": 2000,
      "temperature": 0.3
    },
    "technical": {
      "description": "Technischer Support",
      "maxTokens": 3000,
      "temperature": 0.2
    },
    "training": {
      "description": "Benutzer-Training",
      "maxTokens": 2500,
      "temperature": 0.4
    },
    "simple": {
      "description": "Einfache Antworten",
      "maxTokens": 1000,
      "temperature": 0.3
    }
  },
  "features": {
    "emojiEnhancement": true,
    "germanTranslation": true,
    "contextAwareness": true,
    "errorHandling": true
  },
  "debugging": {
    "logFullPrompts": false,
    "logResponses": true,
    "logErrors": true
  }
}
</file>

<file path="srv/tools/database-tools.js">
// srv/tools/database-tools.js - Verbesserte Version
/**
 * Database Tools für den StammtischAI Agent
 * Moderne CDS-Syntax ohne deprecated APIs
 */

const cds = require('@sap/cds');

class DatabaseTools {
  
  constructor() {
    this.tools = {
      'get_stammtische': this.getStammtische.bind(this),
      'get_stammtisch_by_id': this.getStammtischById.bind(this),
      'search_stammtische': this.searchStammtische.bind(this),
      'get_praesentatoren': this.getPraesentatoren.bind(this),
      'get_teilnehmer': this.getTeilnehmer.bind(this),
      'get_stammtisch_statistics': this.getStammtischStatistics.bind(this),
      'get_upcoming_stammtische': this.getUpcomingStammtische.bind(this)
    };
  }

  /**
   * Hauptmethode: Führt ein Tool aus
   */
  async executeTool(toolName, parameters = {}) {
    console.log(`=== Executing Tool: ${toolName} ===`);
    console.log('Parameters:', parameters);

    if (!this.tools[toolName]) {
      throw new Error(`Tool '${toolName}' not found. Available tools: ${Object.keys(this.tools).join(', ')}`);
    }

    try {
      const result = await this.tools[toolName](parameters);
      console.log(`Tool ${toolName} executed successfully`);
      return {
        success: true,
        tool: toolName,
        data: result,
        message: `Tool ${toolName} executed successfully`
      };
    } catch (error) {
      console.error(`Error executing tool ${toolName}:`, error);
      return {
        success: false,
        tool: toolName,
        error: error.message,
        message: `Error executing tool ${toolName}: ${error.message}`
      };
    }
  }

  /**
   * Tool: Alle Stammtische abrufen
   */
  async getStammtische(params = {}) {
    const { limit = 10, offset = 0 } = params;
    
    const query = SELECT.from('sap.stammtisch.Stammtische')
      .columns(['ID', 'thema', 'datum', 'ort', 'notizen'])
      .limit(limit, offset)
      .orderBy('datum desc');

    const result = await cds.run(query);
    
    return {
      count: result.length,
      stammtische: result.map(s => ({
        id: s.ID,
        thema: s.thema,
        datum: s.datum,
        ort: s.ort,
        notizen: s.notizen ? s.notizen.substring(0, 100) + '...' : null
      }))
    };
  }

  /**
   * Tool: Einzelnen Stammtisch abrufen
   */
  async getStammtischById(params) {
    const { id } = params;
    
    if (!id) {
      throw new Error('Parameter "id" is required');
    }

    const query = SELECT.from('sap.stammtisch.Stammtische')
      .where({ ID: id })
      .columns(['ID', 'thema', 'datum', 'ort', 'notizen', 'praesentator_ID']);

    const result = await cds.run(query);

    if (!result || result.length === 0) {
      throw new Error(`Stammtisch with ID ${id} not found`);
    }

    const stammtisch = result[0];

    // Präsentator-Daten laden
    if (stammtisch.praesentator_ID) {
      const praesentatorQuery = SELECT.from('sap.stammtisch.Praesentatoren')
        .where({ ID: stammtisch.praesentator_ID })
        .columns(['name', 'email', 'linkedin']);
      
      const praesentator = await cds.run(praesentatorQuery);
      stammtisch.praesentator = praesentator[0] || null;
    }

    // Teilnehmer laden
    const teilnehmerQuery = SELECT.from('sap.stammtisch.Teilnehmer')
      .where({ stammtisch_ID: id })
      .columns(['ID', 'name', 'email']);
    
    const teilnehmer = await cds.run(teilnehmerQuery);
    stammtisch.teilnehmer = teilnehmer;

    return stammtisch;
  }

  /**
   * Tool: Stammtische suchen - SICHERE VERSION
   */
  async searchStammtische(params) {
    const { query: searchQuery, limit = 10 } = params;
    
    if (!searchQuery) {
      throw new Error('Parameter "query" is required');
    }

    console.log(`Searching for: "${searchQuery}"`);

    // Option 1: Sichere Parametrisierte Query
    try {
      // Verwende mehrere einzelne WHERE-Bedingungen mit OR
      const result = await cds.run(
        SELECT.from('sap.stammtisch.Stammtische')
          .columns(['ID', 'thema', 'datum', 'ort'])
          .where(
            { thema: { like: `%${searchQuery}%` } },
            'or',
            { ort: { like: `%${searchQuery}%` } },
            'or', 
            { notizen: { like: `%${searchQuery}%` } }
          )
          .limit(limit)
          .orderBy('datum desc')
      );

      console.log(`Search found ${result.length} results`);
      
      return {
        searchQuery,
        count: result.length,
        results: result
      };

    } catch (error) {
      console.warn('Parametrisierte Query fehlgeschlagen, versuche Alternative:', error.message);
      
      // Option 2: Alternative mit separaten Queries
      return await this.searchStammtischeAlternative(searchQuery, limit);
    }
  }

  /**
   * Alternative Such-Implementierung
   */
  async searchStammtischeAlternative(searchQuery, limit = 10) {
    console.log('Using alternative search method');
    
    try {
      // Alle Stammtische laden und client-seitig filtern
      const allStammtische = await cds.run(
        SELECT.from('sap.stammtisch.Stammtische')
          .columns(['ID', 'thema', 'datum', 'ort', 'notizen'])
          .orderBy('datum desc')
      );

      // Client-seitige Filterung
      const searchLower = searchQuery.toLowerCase();
      const filtered = allStammtische.filter(s => 
        (s.thema && s.thema.toLowerCase().includes(searchLower)) ||
        (s.ort && s.ort.toLowerCase().includes(searchLower)) ||
        (s.notizen && s.notizen.toLowerCase().includes(searchLower))
      ).slice(0, limit);

      console.log(`Alternative search found ${filtered.length} results`);

      return {
        searchQuery,
        count: filtered.length,
        results: filtered.map(s => ({
          ID: s.ID,
          thema: s.thema,
          datum: s.datum,
          ort: s.ort
        }))
      };

    } catch (error) {
      console.error('Alternative search failed:', error);
      throw new Error(`Search failed: ${error.message}`);
    }
  }

  /**
   * Tool: Alle Präsentatoren abrufen
   */
  async getPraesentatoren(params = {}) {
    const { limit = 20 } = params;
    
    const query = SELECT.from('sap.stammtisch.Praesentatoren')
      .columns(['ID', 'name', 'email', 'linkedin'])
      .limit(limit);

    const result = await cds.run(query);
    
    return {
      count: result.length,
      praesentatoren: result
    };
  }

  /**
   * Tool: Teilnehmer für einen Stammtisch abrufen
   */
  async getTeilnehmer(params) {
    const { stammtischId } = params;
    
    if (!stammtischId) {
      throw new Error('Parameter "stammtischId" is required');
    }

    const query = SELECT.from('sap.stammtisch.Teilnehmer')
      .where({ stammtisch_ID: stammtischId })
      .columns(['ID', 'name', 'email']);

    const result = await cds.run(query);
    
    return {
      stammtischId,
      count: result.length,
      teilnehmer: result
    };
  }

  /**
   * Tool: Statistiken abrufen
   */
  async getStammtischStatistics(params = {}) {
    try {
      // Gesamtanzahl Stammtische
      const totalStammtische = await cds.run(
        SELECT.one(['count(*) as total']).from('sap.stammtisch.Stammtische')
      );

      // Gesamtanzahl Teilnehmer
      const totalTeilnehmer = await cds.run(
        SELECT.one(['count(*) as total']).from('sap.stammtisch.Teilnehmer')
      );

      // Gesamtanzahl Präsentatoren
      const totalPraesentatoren = await cds.run(
        SELECT.one(['count(*) as total']).from('sap.stammtisch.Praesentatoren')
      );

      // Stammtische nach Ort - vereinfacht
      const stammtischeByOrt = await cds.run(
        SELECT(['ort', 'count(*) as anzahl'])
          .from('sap.stammtisch.Stammtische')
          .groupBy('ort')
          .orderBy('anzahl desc')
          .limit(10)
      );

      // Aktivste Präsentatoren - vereinfacht für bessere Kompatibilität
      let aktivePraesentatoren = [];
      try {
        aktivePraesentatoren = await cds.run(
          SELECT(['p.name', 'count(s.ID) as stammtische_count'])
            .from('sap.stammtisch.Praesentatoren as p')
            .join('sap.stammtisch.Stammtische as s').on('s.praesentator_ID = p.ID')
            .groupBy('p.ID', 'p.name')
            .orderBy('stammtische_count desc')
            .limit(5)
        );
      } catch (joinError) {
        console.warn('JOIN query failed, using alternative approach:', joinError.message);
        // Fallback: Lade alle Daten und berechne client-seitig
        aktivePraesentatoren = await this.calculateActivePresentersAlternative();
      }

      return {
        summary: {
          totalStammtische: totalStammtische.total || 0,
          totalTeilnehmer: totalTeilnehmer.total || 0,
          totalPraesentatoren: totalPraesentatoren.total || 0
        },
        stammtischeByOrt: stammtischeByOrt || [],
        aktivePraesentatoren: aktivePraesentatoren || []
      };

    } catch (error) {
      console.error('Statistics query failed:', error);
      throw new Error(`Failed to get statistics: ${error.message}`);
    }
  }

  /**
   * Alternative Berechnung für aktivste Präsentatoren
   */
  async calculateActivePresentersAlternative() {
    try {
      const praesentatoren = await cds.run(
        SELECT.from('sap.stammtisch.Praesentatoren').columns(['ID', 'name'])
      );
      
      const stammtische = await cds.run(
        SELECT.from('sap.stammtisch.Stammtische').columns(['praesentator_ID'])
      );

      // Client-seitige Aggregation
      const counts = {};
      stammtische.forEach(s => {
        if (s.praesentator_ID) {
          counts[s.praesentator_ID] = (counts[s.praesentator_ID] || 0) + 1;
        }
      });

      // Top 5 aktivste Präsentatoren
      const result = praesentatoren
        .map(p => ({
          name: p.name,
          stammtische_count: counts[p.ID] || 0
        }))
        .filter(p => p.stammtische_count > 0)
        .sort((a, b) => b.stammtische_count - a.stammtische_count)
        .slice(0, 5);

      console.log('Alternative presenter calculation successful');
      return result;

    } catch (error) {
      console.error('Alternative presenter calculation failed:', error);
      return [];
    }
  }

  /**
   * Tool: Kommende Stammtische abrufen
   */
  async getUpcomingStammtische(params = {}) {
    const { limit = 5 } = params;
    const now = new Date().toISOString();

    try {
      const query = SELECT.from('sap.stammtisch.Stammtische')
        .where({ datum: { '>=': now } })
        .columns(['ID', 'thema', 'datum', 'ort'])
        .orderBy('datum asc')
        .limit(limit);

      const result = await cds.run(query);
      
      return {
        count: result.length,
        upcomingStammtische: result
      };

    } catch (error) {
      console.warn('Date query failed, using alternative approach:', error.message);
      
      // Alternative: Alle Stammtische laden und client-seitig filtern
      const allStammtische = await cds.run(
        SELECT.from('sap.stammtisch.Stammtische')
          .columns(['ID', 'thema', 'datum', 'ort'])
          .orderBy('datum asc')
      );

      const upcoming = allStammtische
        .filter(s => s.datum && new Date(s.datum) >= new Date())
        .slice(0, limit);

      return {
        count: upcoming.length,
        upcomingStammtische: upcoming
      };
    }
  }

  /**
   * Gibt verfügbare Tools zurück
   */
  getAvailableTools() {
    return {
      'get_stammtische': {
        description: 'Ruft alle Stammtische ab',
        parameters: {
          limit: 'Anzahl der Ergebnisse (optional, default: 10)',
          offset: 'Offset für Paginierung (optional, default: 0)'
        }
      },
      'get_stammtisch_by_id': {
        description: 'Ruft einen spezifischen Stammtisch mit Details ab',
        parameters: {
          id: 'UUID des Stammtisches (erforderlich)'
        }
      },
      'search_stammtische': {
        description: 'Sucht nach Stammtischen basierend auf Suchbegriff',
        parameters: {
          query: 'Suchbegriff (erforderlich)',
          limit: 'Anzahl der Ergebnisse (optional, default: 10)'
        }
      },
      'get_praesentatoren': {
        description: 'Ruft alle Präsentatoren ab',
        parameters: {
          limit: 'Anzahl der Ergebnisse (optional, default: 20)'
        }
      },
      'get_teilnehmer': {
        description: 'Ruft Teilnehmer für einen Stammtisch ab',
        parameters: {
          stammtischId: 'UUID des Stammtisches (erforderlich)'
        }
      },
      'get_stammtisch_statistics': {
        description: 'Ruft Statistiken über alle Stammtische ab',
        parameters: {}
      },
      'get_upcoming_stammtische': {
        description: 'Ruft kommende Stammtische ab',
        parameters: {
          limit: 'Anzahl der Ergebnisse (optional, default: 5)'
        }
      }
    };
  }
}

module.exports = DatabaseTools;
</file>

<file path="srv/utils/markdown-converter.js">
// srv/utils/markdown-converter.js
/**
 * Einfacher Markdown-zu-HTML Konverter für AI-Antworten
 * Speziell optimiert für SAP UI5 FormattedText Component
 */

class MarkdownConverter {
  
  /**
   * Konvertiert Markdown zu HTML für SAP UI5 FormattedText
   * @param {string} markdown - Markdown Text
   * @returns {string} HTML String
   */
  static convertToHTML(markdown) {
    if (!markdown || typeof markdown !== 'string') {
      return '';
    }

    let html = markdown;

    // 1. Code-Blöcke (müssen zuerst verarbeitet werden)
    html = this.convertCodeBlocks(html);

    // 2. Inline Code
    html = this.convertInlineCode(html);

    // 3. Headers (H1-H4)
    html = this.convertHeaders(html);

    // 4. Bold und Italic
    html = this.convertTextFormatting(html);

    // 5. Listen
    html = this.convertLists(html);

    // 6. Links (falls vorhanden)
    html = this.convertLinks(html);

    // 7. Emojis und Sonderzeichen beibehalten
    html = this.preserveEmojis(html);

    // 8. Zeilenumbrüche
    html = this.convertLineBreaks(html);

    // 9. SAP UI5 spezifische Optimierungen
    html = this.optimizeForSAPUI5(html);

    return html.trim();
  }

  /**
   * Konvertiert Code-Blöcke
   */
  static convertCodeBlocks(text) {
    // ```language \n code \n ```
    return text.replace(/```(\w*)\n([\s\S]*?)\n```/g, (match, language, code) => {
      const cleanCode = this.escapeHTML(code.trim());
      return `<div class="ai-code-block">
        <div class="ai-code-header">${language || 'Code'}</div>
        <pre class="ai-code-content"><code>${cleanCode}</code></pre>
      </div>`;
    });
  }

  /**
   * Konvertiert Inline-Code
   */
  static convertInlineCode(text) {
    return text.replace(/`([^`]+)`/g, '<code class="ai-inline-code">$1</code>');
  }

  /**
   * Konvertiert Headers
   */
  static convertHeaders(text) {
    // ### Header 3
    text = text.replace(/^### (.+)$/gm, '<h3 class="ai-header-3">$1</h3>');
    // ## Header 2  
    text = text.replace(/^## (.+)$/gm, '<h2 class="ai-header-2">$1</h2>');
    // # Header 1
    text = text.replace(/^# (.+)$/gm, '<h1 class="ai-header-1">$1</h1>');
    
    return text;
  }

  /**
   * Konvertiert Bold und Italic
   */
  static convertTextFormatting(text) {
    // **Bold**
    text = text.replace(/\*\*([^*]+)\*\*/g, '<strong class="ai-bold">$1</strong>');
    // *Italic*
    text = text.replace(/\*([^*]+)\*/g, '<em class="ai-italic">$1</em>');
    
    return text;
  }

  /**
   * Konvertiert Listen
   */
  static convertLists(text) {
    // Unordered Lists
    text = text.replace(/^- (.+)$/gm, '<li class="ai-list-item">$1</li>');
    
    // Wrap consecutive list items in <ul>
    text = text.replace(/(<li class="ai-list-item">.*<\/li>\s*)+/gs, (match) => {
      return `<ul class="ai-unordered-list">${match}</ul>`;
    });

    // Numbered Lists (vereinfacht)
    text = text.replace(/^\d+\. (.+)$/gm, '<li class="ai-numbered-item">$1</li>');
    
    // Wrap consecutive numbered items in <ol>
    text = text.replace(/(<li class="ai-numbered-item">.*<\/li>\s*)+/gs, (match) => {
      return `<ol class="ai-ordered-list">${match}</ol>`;
    });

    return text;
  }

  /**
   * Konvertiert Links
   */
  static convertLinks(text) {
    // [Text](URL)
    return text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="#" class="ai-link" data-url="$2" title="$2">$1</a>');
  }

  /**
   * Behält Emojis bei
   */
  static preserveEmojis(text) {
    // Emojis sind bereits Unicode, keine Konvertierung nötig
    return text;
  }

  /**
   * Konvertiert Zeilenumbrüche
   */
  static convertLineBreaks(text) {
    // Doppelte Zeilenumbrüche zu Paragraphen
    text = text.replace(/\n\n+/g, '</p><p class="ai-paragraph">');
    
    // Einzelne Zeilenumbrüche zu <br>
    text = text.replace(/\n/g, '<br/>');
    
    // Wrap in paragraph wenn nicht schon in anderen Tags
    if (!text.startsWith('<') && text.length > 0) {
      text = `<p class="ai-paragraph">${text}</p>`;
    }

    return text;
  }

  /**
   * SAP UI5 spezifische Optimierungen
   */
  static optimizeForSAPUI5(text) {
    // Bereinige leere Paragraphen
    text = text.replace(/<p class="ai-paragraph"><\/p>/g, '');
    
    // Stelle sicher, dass alle Tags geschlossen sind
    text = this.closeOpenTags(text);
    
    return text;
  }

  /**
   * HTML Escaping für Sicherheit
   */
  static escapeHTML(text) {
    const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    return text.replace(/[&<>"']/g, (m) => map[m]);
  }

  /**
   * Schließt offene Tags (vereinfacht)
   */
  static closeOpenTags(html) {
    // Einfache Implementation - für Produktionsumgebung sollte ein richtiger HTML-Parser verwendet werden
    const openTags = [];
    const tagRegex = /<\/?([a-zA-Z][a-zA-Z0-9]*)[^>]*>/g;
    
    let match;
    while ((match = tagRegex.exec(html)) !== null) {
      if (match[0].startsWith('</')) {
        // Closing tag
        const tag = match[1].toLowerCase();
        const index = openTags.lastIndexOf(tag);
        if (index !== -1) {
          openTags.splice(index, 1);
        }
      } else if (!match[0].endsWith('/>')) {
        // Opening tag (not self-closing)
        openTags.push(match[1].toLowerCase());
      }
    }

    // Schließe offene Tags
    for (let i = openTags.length - 1; i >= 0; i--) {
      html += `</${openTags[i]}>`;
    }

    return html;
  }

  /**
   * Spezielle Konvertierung für SAP-spezifische Inhalte
   */
  static convertSAPContent(text) {
    // SAP UI5 Komponenten-Namen hervorheben
    text = text.replace(/\b(List Report|Object Page|Draft|Value Help|Smart Filter Bar)\b/g, 
      '<span class="ai-sap-term">$1</span>');
    
    // Schritt-für-Schritt Anleitungen
    text = text.replace(/^\*\*Schritt (\d+)\*\*:?/gm, 
      '<div class="ai-step-header">📋 <strong>Schritt $1</strong></div>');
    
    return text;
  }

  /**
   * Hauptmethode für die Konvertierung mit SAP-spezifischen Verbesserungen
   */
  static convertForStammtischAI(markdown) {
    let html = this.convertToHTML(markdown);
    html = this.convertSAPContent(html);
    return html;
  }
}

module.exports = MarkdownConverter;
</file>

<file path=".cdsrc.json">
{
  "requires": {
    "db": {
      "kind": "postgres",
      "credentials": {
        "database": "stammtisch_ai_db",
        "user": "duh",
        "password": "test123",
        "host": "localhost", 
        "port": 5433        
      }
    }
  }
}
</file>

<file path="app/webapp/css/customStyles.css">
/* SAP Horizon Theme Chat Interface - Vereinfacht */

/* SAP Horizon Design Tokens */
:root {
  /* Primary Colors */
  --sapHorizon-Blue-Primary: #0070F2;
  --sapHorizon-Blue-Secondary: #E7F3FF;
  --sapHorizon-Blue-Accent: #004B9E;

  /* Neutral Colors */
  --sapHorizon-Neutral-100: #FFFFFF;
  --sapHorizon-Neutral-200: #F5F6F7;
  --sapHorizon-Neutral-300: #EAECEF;
  --sapHorizon-Neutral-400: #D5D9DD;
  --sapHorizon-Neutral-500: #8396A8;
  --sapHorizon-Neutral-600: #556B82;
  --sapHorizon-Neutral-700: #354A5F;
  --sapHorizon-Neutral-800: #1D2D3E;

  /* Semantic Colors */
  --sapHorizon-Success: #30914C;
  --sapHorizon-Warning: #E76B00;
  --sapHorizon-Error: #BB0000;
  --sapHorizon-Information: #0070F2;

  /* SAP Horizon Spacing */
  --sapHorizon-Space-Tiny: 0.25rem;
  --sapHorizon-Space-Small: 0.5rem;
  --sapHorizon-Space-Medium: 1rem;
  --sapHorizon-Space-Large: 1.5rem;
  --sapHorizon-Space-XLarge: 2rem;

  /* SAP Horizon Typography */
  --sapHorizon-FontFamily: "72", "72full", Arial, Helvetica, sans-serif;
  --sapHorizon-FontSize-Small: 0.75rem;
  --sapHorizon-FontSize-Medium: 0.875rem;
  --sapHorizon-FontSize-Large: 1rem;
  --sapHorizon-FontSize-XLarge: 1.25rem;

  /* SAP Horizon Shadows */
  --sapHorizon-Shadow-Level1: 0 0.125rem 0.5rem 0 rgba(29, 45, 62, 0.1);
  --sapHorizon-Shadow-Level2: 0 0.25rem 1rem 0 rgba(29, 45, 62, 0.15);
  --sapHorizon-Shadow-Level3: 0 0.5rem 1.5rem 0 rgba(29, 45, 62, 0.2);

  /* SAP Horizon Border Radius */
  --sapHorizon-BorderRadius-Small: 0.25rem;
  --sapHorizon-BorderRadius-Medium: 0.5rem;
  --sapHorizon-BorderRadius-Large: 0.75rem;
}

/* Container Styles */
.modernChatContainer {
  background: var(--sapHorizon-Neutral-200);
  font-family: var(--sapHorizon-FontFamily);
  height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Header Styles */
.modernChatHeader {
  background: var(--sapHorizon-Neutral-100);
  border-bottom: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large) var(--sapHorizon-Space-XLarge);
  box-shadow: var(--sapHorizon-Shadow-Level1);
  position: sticky;
  top: 0;
  z-index: 10;
}

.modernHeaderIcon {
  font-size: 1.5rem;
  color: var(--sapHorizon-Blue-Primary);
}

.modernHeaderTitle {
  font-weight: 600;
  color: var(--sapHorizon-Neutral-800);
  margin: 0;
  line-height: 1.25;
  font-size: var(--sapHorizon-FontSize-Large);
}

.modernHeaderStatus {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Success);
  font-weight: 500;
}

.modernHeaderButton {
  min-width: 2.25rem;
  height: 2.25rem;
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  margin-left: var(--sapHorizon-Space-Tiny);
  color: var(--sapHorizon-Neutral-600);
}

.modernHeaderButton:hover {
  background-color: var(--sapHorizon-Blue-Secondary);
  color: var(--sapHorizon-Blue-Primary);
}

/* Messages Container */
.modernChatMessagesContainer {
  flex: 1;
  background: transparent;
}

.modernMessagesWrapper {
  max-width: 768px;
  margin: 0 auto;
  padding: var(--sapHorizon-Space-XLarge);
  min-height: 100%;
}

.modernMessagesList {
  background: transparent;
}

.modernMessageItem {
  background: transparent;
  margin-bottom: var(--sapHorizon-Space-Large);
  border: none;
}

.modernMessageRow {
  align-items: flex-start;
  gap: var(--sapHorizon-Space-Medium);
}

/* User Messages */
.modernUserMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernUserMessage {
  background: var(--sapHorizon-Blue-Primary);
  color: var(--sapHorizon-Neutral-100);
  padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small) var(--sapHorizon-BorderRadius-Large);
  max-width: 70%;
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernUserMessage:hover {
  box-shadow: var(--sapHorizon-Shadow-Level2);
}

.modernUserText {
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.5;
  color: var(--sapHorizon-Neutral-100) !important;
  word-wrap: break-word;
}

.modernUserTimestamp {
  font-size: var(--sapHorizon-FontSize-Small);
  color: rgba(255, 255, 255, 0.8);
  margin-top: var(--sapHorizon-Space-Tiny);
  text-align: right;
}

.modernUserAvatar {
  margin-top: 2px;
}

/* Assistant Messages */
.modernAssistantMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernAssistantMessage {
  background: var(--sapHorizon-Neutral-100);
  border: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small);
  max-width: 75%;
  box-shadow: var(--sapHorizon-Shadow-Level1);
  position: relative;
}

.modernAssistantMessage:hover {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: var(--sapHorizon-Shadow-Level2);
}

.modernAssistantMessage:hover .modernMessageActions {
  opacity: 1;
}

.modernAssistantText {
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.6;
  color: var(--sapHorizon-Neutral-800) !important;
  word-wrap: break-word;
}

.modernMessageFooter {
  margin-top: var(--sapHorizon-Space-Small);
}

.modernAssistantTimestamp {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-500);
}

.modernMessageActions {
  opacity: 0;
  transition: opacity 0.2s ease;
  gap: var(--sapHorizon-Space-Tiny);
}

.modernActionButton {
  min-width: 1.75rem;
  height: 1.75rem;
  border-radius: var(--sapHorizon-BorderRadius-Small);
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-600);
}

.modernActionButton:hover {
  background-color: var(--sapHorizon-Blue-Secondary);
  color: var(--sapHorizon-Blue-Primary);
}

.modernAssistantAvatar {
  margin-top: 2px;
}

/* System Messages */
.modernSystemMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Medium);
}

.modernSystemMessage {
  background: var(--sapHorizon-Blue-Secondary);
  border: 1px solid var(--sapHorizon-Blue-Primary);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large);
  max-width: 80%;
}

.modernSystemText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Blue-Accent);
  text-align: center;
  font-style: italic;
}

/* Typing Indicator */
.modernTypingContainer {
  margin-bottom: var(--sapHorizon-Space-Large);
}

.modernTypingMessage {
  background: var(--sapHorizon-Neutral-100);
  border: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Large) var(--sapHorizon-BorderRadius-Small);
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernTypingIndicator {
  display: flex;
  align-items: center;
  gap: var(--sapHorizon-Space-Tiny);
}

.modernTypingDot {
  width: 0.5rem !important;
  height: 0.5rem !important;
  border-radius: 50%;
  background-color: var(--sapHorizon-Blue-Primary);
  font-size: 0 !important;
  /* Hide any icon content */
  min-width: 0.5rem;
  min-height: 0.5rem;
}

.modernTypingDot1 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
  animation-delay: -0.32s;
}

.modernTypingDot2 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
  animation-delay: -0.16s;
}

.modernTypingDot3 {
  animation: horizonTypingBounce 1.4s infinite ease-in-out both;
}

@keyframes horizonTypingBounce {

  0%,
  80%,
  100% {
    transform: scale(0.8);
    opacity: 0.5;
  }

  40% {
    transform: scale(1);
    opacity: 1;
  }
}

.modernTypingText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-600);
  margin-left: var(--sapHorizon-Space-Small);
  font-style: italic;
}

/* Input Area */
.modernInputContainer {
  background: var(--sapHorizon-Neutral-100);
  border-top: 1px solid var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Large) var(--sapHorizon-Space-XLarge);
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.modernInputRow {
  gap: var(--sapHorizon-Space-Medium);
  align-items: flex-end;
}

.modernInputWrapper {
  flex: 1;
}

.modernInputField {
  border: 1px solid var(--sapHorizon-Neutral-400);
  border-radius: var(--sapHorizon-BorderRadius-Large);
  background: var(--sapHorizon-Neutral-100);
  transition: all 0.2s ease;
  resize: none;
}

.modernInputField:focus {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: 0 0 0 2px var(--sapHorizon-Blue-Secondary);
}

.modernInputField:focus-within {
  border-color: var(--sapHorizon-Blue-Primary);
  box-shadow: 0 0 0 2px var(--sapHorizon-Blue-Secondary);
}

.modernInputField textarea {
  padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large) !important;
  border: none !important;
  outline: none !important;
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.5;
  font-family: var(--sapHorizon-FontFamily);
  color: var(--sapHorizon-Neutral-800);
}

.modernSendButton {
  min-width: 2.5rem;
  height: 2.5rem;
  border-radius: var(--sapHorizon-BorderRadius-Large);
  background: var(--sapHorizon-Blue-Primary);
  color: var(--sapHorizon-Neutral-100);
  transition: all 0.2s ease;
}

.modernSendButton:hover {
  background: var(--sapHorizon-Blue-Accent);
  transform: scale(1.02);
}

.modernSendButton:active {
  transform: scale(0.98);
}

/* Input Footer - Minimal Design */
.modernInputFooter {
  margin-top: var(--sapHorizon-Space-Small);
  padding: var(--sapHorizon-Space-Tiny) var(--sapHorizon-Space-Small);
  background: transparent;
  border: none;
  min-height: 1.2rem;
}

.modernCharCounter {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Warning);
  font-weight: 500;
  margin-right: var(--sapHorizon-Space-Small);
}

.modernStatusMessage {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Neutral-500);
  font-weight: 400;
  font-style: italic;
}

/* Scrollbar Styling - SAP Horizon */
.modernChatMessagesContainer .sapMScrollCont {
  scrollbar-width: thin;
  scrollbar-color: var(--sapHorizon-Neutral-400) transparent;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar {
  width: 6px;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-track {
  background: transparent;
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-thumb {
  background-color: var(--sapHorizon-Neutral-400);
  border-radius: var(--sapHorizon-BorderRadius-Small);
}

.modernChatMessagesContainer .sapMScrollCont::-webkit-scrollbar-thumb:hover {
  background-color: var(--sapHorizon-Neutral-500);
}

/* Animations */
.modernMessageItem {
  animation: horizonFadeInUp 0.3s ease-out;
}

@keyframes horizonFadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Focus Management for Accessibility */
.modernHeaderButton:focus,
.modernActionButton:focus,
.modernSendButton:focus {
  outline: 2px solid var(--sapHorizon-Blue-Primary);
  outline-offset: 2px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .modernMessagesWrapper {
    padding: var(--sapHorizon-Space-Large);
  }

  .modernUserMessage,
  .modernAssistantMessage {
    max-width: 85%;
  }

  .modernInputContainer {
    padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  }

  .modernChatHeader {
    padding: var(--sapHorizon-Space-Medium) var(--sapHorizon-Space-Large);
  }
}

/* Additional SAP Horizon Message Types */
.modernInfoMessageContainer,
.modernWarningMessageContainer {
  margin-bottom: var(--sapHorizon-Space-Medium);
}

.modernInfoMessage {
  background: var(--sapHorizon-Blue-Secondary);
  border: 1px solid var(--sapHorizon-Blue-Primary);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  gap: var(--sapHorizon-Space-Small);
}

.modernInfoIcon {
  font-size: var(--sapHorizon-FontSize-Medium);
  color: var(--sapHorizon-Information);
}

.modernInfoText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: var(--sapHorizon-Blue-Accent);
  font-weight: 500;
}

.modernWarningMessage {
  background: #FFF4E6;
  border: 1px solid var(--sapHorizon-Warning);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Large);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  gap: var(--sapHorizon-Space-Small);
}

.modernWarningIcon {
  font-size: var(--sapHorizon-FontSize-Medium);
  color: var(--sapHorizon-Warning);
}

.modernWarningText {
  font-size: var(--sapHorizon-FontSize-Small);
  color: #8B4000;
  font-weight: 500;
}

/* =====================================================
   AI CHAT MESSAGE FORMATTING - Zusätzliche CSS Regeln
   Fügen Sie diese Regeln zu Ihrer customStyles.css hinzu
   ===================================================== */

/* AI Message Content Wrapper */
.modernAssistantText {
  font-size: var(--sapHorizon-FontSize-Medium);
  line-height: 1.6;
  color: var(--sapHorizon-Neutral-800) !important;
  word-wrap: break-word;
}

/* AI Content Typography */
.ai-paragraph {
  margin: 0 0 var(--sapHorizon-Space-Medium) 0;
  line-height: 1.6;
}

.ai-paragraph:last-child {
  margin-bottom: 0;
}

/* AI Headers */
.ai-header-1 {
  font-size: var(--sapHorizon-FontSize-XLarge);
  font-weight: 600;
  color: var(--sapHorizon-Blue-Primary);
  margin: var(--sapHorizon-Space-Large) 0 var(--sapHorizon-Space-Medium) 0;
  border-bottom: 2px solid var(--sapHorizon-Blue-Secondary);
  padding-bottom: var(--sapHorizon-Space-Tiny);
}

.ai-header-2 {
  font-size: var(--sapHorizon-FontSize-Large);
  font-weight: 600;
  color: var(--sapHorizon-Neutral-800);
  margin: var(--sapHorizon-Space-Large) 0 var(--sapHorizon-Space-Medium) 0;
}

.ai-header-3 {
  font-size: var(--sapHorizon-FontSize-Medium);
  font-weight: 600;
  color: var(--sapHorizon-Neutral-700);
  margin: var(--sapHorizon-Space-Medium) 0 var(--sapHorizon-Space-Small) 0;
}

/* AI Text Formatting */
.ai-bold {
  font-weight: 600;
  color: var(--sapHorizon-Neutral-800);
}

.ai-italic {
  font-style: italic;
  color: var(--sapHorizon-Neutral-700);
}

/* AI Code Styling */
.ai-code-block {
  background: var(--sapHorizon-Neutral-200);
  border: 1px solid var(--sapHorizon-Neutral-300);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  margin: var(--sapHorizon-Space-Medium) 0;
  overflow: hidden;
  box-shadow: var(--sapHorizon-Shadow-Level1);
}

.ai-code-header {
  background: var(--sapHorizon-Neutral-300);
  padding: var(--sapHorizon-Space-Tiny) var(--sapHorizon-Space-Medium);
  font-size: var(--sapHorizon-FontSize-Small);
  font-weight: 600;
  color: var(--sapHorizon-Neutral-700);
  border-bottom: 1px solid var(--sapHorizon-Neutral-400);
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.ai-copy-button {
  background: var(--sapHorizon-Blue-Primary);
  color: var(--sapHorizon-Neutral-100);
  border: none;
  padding: 4px 8px;
  border-radius: var(--sapHorizon-BorderRadius-Small);
  font-size: var(--sapHorizon-FontSize-Small);
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: var(--sapHorizon-FontFamily);
}

.ai-copy-button:hover {
  background: var(--sapHorizon-Blue-Accent);
  transform: scale(1.05);
}

.ai-copy-button:active {
  transform: scale(0.95);
}

.ai-code-content {
  padding: var(--sapHorizon-Space-Medium);
  margin: 0;
  font-family: 'Courier New', Monaco, 'Lucida Console', monospace;
  font-size: var(--sapHorizon-FontSize-Small);
  line-height: 1.4;
  color: var(--sapHorizon-Neutral-800);
  background: transparent;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow-x: auto;
}

.ai-inline-code {
  background: var(--sapHorizon-Neutral-200);
  color: var(--sapHorizon-Blue-Accent);
  padding: 2px 6px;
  border-radius: var(--sapHorizon-BorderRadius-Small);
  font-family: 'Courier New', Monaco, 'Lucida Console', monospace;
  font-size: 0.9em;
  font-weight: 500;
  border: 1px solid var(--sapHorizon-Neutral-300);
}

/* AI Lists */
.ai-unordered-list,
.ai-ordered-list {
  margin: var(--sapHorizon-Space-Medium) 0;
  padding-left: var(--sapHorizon-Space-Large);
}

.ai-unordered-list {
  list-style-type: none;
}

.ai-ordered-list {
  list-style-type: decimal;
}

.ai-list-item,
.ai-numbered-item {
  margin: var(--sapHorizon-Space-Tiny) 0;
  line-height: 1.5;
  position: relative;
}

.ai-unordered-list .ai-list-item::before {
  content: "▪";
  /* color: var(--sapHorizon-Blue-Primary); */
  font-weight: bold;
  position: absolute;
/* left: calc(-1 * var(--sapHorizon-Space-Large)); */
  left: 10px;
  font-size: 1.2em;
}

/* AI Links */
.ai-link {
  color: var(--sapHorizon-Blue-Primary);
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: all 0.2s ease;
  cursor: pointer;
}

.ai-link:hover {
  color: var(--sapHorizon-Blue-Accent);
  border-bottom-color: var(--sapHorizon-Blue-Primary);
}

/* AI Step-by-Step Instructions */
.ai-step-header {
  background: var(--sapHorizon-Blue-Secondary);
  color: var(--sapHorizon-Blue-Accent);
  padding: var(--sapHorizon-Space-Small) var(--sapHorizon-Space-Medium);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  margin: var(--sapHorizon-Space-Medium) 0 var(--sapHorizon-Space-Small) 0;
  border-left: 4px solid var(--sapHorizon-Blue-Primary);
  font-weight: 600;
}

/* SAP-specific Terms Highlighting */
.ai-sap-term {
  background: linear-gradient(120deg, var(--sapHorizon-Blue-Secondary) 0%, var(--sapHorizon-Blue-Secondary) 100%);
  color: var(--sapHorizon-Blue-Accent);
  padding: 1px 4px;
  border-radius: var(--sapHorizon-BorderRadius-Small);
  font-weight: 500;
  border: 1px solid var(--sapHorizon-Blue-Primary);
}

/* AI Message Improvements */
.modernAssistantMessage .ai-paragraph:first-child {
  margin-top: 0;
}

.modernAssistantMessage .ai-code-block:first-child {
  margin-top: 0;
}

.modernAssistantMessage .ai-code-block:last-child {
  margin-bottom: 0;
}

/* Special AI Message Types */
.ai-info-box {
  background: var(--sapHorizon-Blue-Secondary);
  border: 1px solid var(--sapHorizon-Blue-Primary);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  padding: var(--sapHorizon-Space-Medium);
  margin: var(--sapHorizon-Space-Medium) 0;
  border-left: 4px solid var(--sapHorizon-Information);
}

.ai-warning-box {
  background: #FFF4E6;
  border: 1px solid var(--sapHorizon-Warning);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  padding: var(--sapHorizon-Space-Medium);
  margin: var(--sapHorizon-Space-Medium) 0;
  border-left: 4px solid var(--sapHorizon-Warning);
}

.ai-success-box {
  background: #F1F8E9;
  border: 1px solid var(--sapHorizon-Success);
  border-radius: var(--sapHorizon-BorderRadius-Medium);
  padding: var(--sapHorizon-Space-Medium);
  margin: var(--sapHorizon-Space-Medium) 0;
  border-left: 4px solid var(--sapHorizon-Success);
}

/* AI Message Animation Improvements */
.modernAssistantMessage .ai-code-block,
.modernAssistantMessage .ai-step-header,
.modernAssistantMessage .ai-info-box {
  animation: aiContentFadeIn 0.4s ease-out;
}

@keyframes aiContentFadeIn {
  from {
    opacity: 0;
    transform: translateY(5px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Better Scrolling for Code Blocks */
.ai-code-content::-webkit-scrollbar {
  height: 6px;
}

.ai-code-content::-webkit-scrollbar-track {
  background: var(--sapHorizon-Neutral-300);
  border-radius: var(--sapHorizon-BorderRadius-Small);
}

.ai-code-content::-webkit-scrollbar-thumb {
  background: var(--sapHorizon-Neutral-500);
  border-radius: var(--sapHorizon-BorderRadius-Small);
}

.ai-code-content::-webkit-scrollbar-thumb:hover {
  background: var(--sapHorizon-Neutral-600);
}

/* Responsive Improvements for AI Content */
@media (max-width: 768px) {
  .ai-code-block {
    margin-left: calc(-1 * var(--sapHorizon-Space-Medium));
    margin-right: calc(-1 * var(--sapHorizon-Space-Medium));
    border-radius: 0;
  }

  .ai-code-content {
    font-size: var(--sapHorizon-FontSize-Small);
  }

  .ai-step-header {
    margin-left: calc(-1 * var(--sapHorizon-Space-Small));
    margin-right: calc(-1 * var(--sapHorizon-Space-Small));
  }
}

/* Focus States for Accessibility */
.ai-link:focus {
  outline: 2px solid var(--sapHorizon-Blue-Primary);
  outline-offset: 2px;
  border-radius: var(--sapHorizon-BorderRadius-Small);
}

/* Print Styles for AI Content */
@media print {
  .ai-code-block {
    border: 1px solid #000;
    background: #f5f5f5;
  }

  .ai-code-header {
    background: #e0e0e0;
    border-bottom: 1px solid #000;
  }

  .ai-link {
    color: #000;
    text-decoration: underline;
  }

  .ai-link::after {
    content: " (" attr(data-url) ")";
    font-size: 0.8em;
    color: #666;
  }
}
</file>

<file path="app/webapp/ext/ChatSidePanelContent.fragment.xml">
<core:FragmentDefinition
    xmlns="sap.m"
    xmlns:core="sap.ui.core"
    xmlns:l="sap.ui.layout"
    xmlns:f="sap.f">
    
    <VBox height="100%" class="modernChatContainer">
        <!-- SAP Horizon Chat Header -->
        <HBox class="modernChatHeader" justifyContent="SpaceBetween" alignItems="Center">
            <HBox alignItems="Center">
                <core:Icon src="sap-icon://discussion-2" class="modernHeaderIcon"/>
                <VBox class="sapUiTinyMarginBegin">
                    <Title text="SAP AI Assistant" level="H5" class="modernHeaderTitle"/>
                    <Text text="Bereit zu helfen" class="modernHeaderStatus"/>
                </VBox>
            </HBox>
            <HBox>
                <Button 
                    icon="sap-icon://restart" 
                    type="Transparent" 
                    tooltip="Neuer Chat"
                    press="onClearChatHistory"
                    class="modernHeaderButton"
                    ariaLabel="Neuen Chat starten"/>
                <Button 
                    icon="sap-icon://action-settings" 
                    type="Transparent" 
                    tooltip="Einstellungen"
                    class="modernHeaderButton"
                    ariaLabel="Einstellungen öffnen"/>
            </HBox>
        </HBox>

        <!-- Chat Messages Area -->
        <ScrollContainer 
            id="chatHistoryScrollContainerInSidePanel"
            height="100%" 
            vertical="true" 
            horizontal="false"
            class="modernChatMessagesContainer">
            
            <VBox class="modernMessagesWrapper">
                <!-- Chat Messages List -->
                <List 
                    id="chatMessagesList"
                    items="{chat>/chatHistory}"
                    showSeparators="None"
                    mode="None"
                    class="modernMessagesList">
                    
                    <CustomListItem class="modernMessageItem">
                        <content>
                            <!-- User Message -->
                            <VBox visible="{= ${chat>type} === 'user' }" class="modernUserMessageContainer">
                                <HBox justifyContent="End" class="modernMessageRow">
                                    <VBox class="modernUserMessage">
                                        <FormattedText htmlText="{chat>text}" class="modernMessageText modernUserText"/>
                                        <Text text="{chat>timestamp}" class="modernTimestamp modernUserTimestamp"/>
                                    </VBox>
                                    <Avatar 
                                        src="" 
                                        initials="Sie" 
                                        displaySize="XS" 
                                        backgroundColor="Accent6"
                                        imageFitType="Cover"
                                        class="modernUserAvatar"/>
                                </HBox>
                            </VBox>
                            
                            <!-- Assistant Message -->
                            <VBox visible="{= ${chat>type} === 'assistant' }" class="modernAssistantMessageContainer">
                                <HBox justifyContent="Start" class="modernMessageRow">
                                    <Avatar 
                                        src="" 
                                        initials="AI" 
                                        displaySize="XS" 
                                        backgroundColor="Accent1"
                                        imageFitType="Cover"
                                        class="modernAssistantAvatar"/>
                                    <VBox class="modernAssistantMessage">
                                        <FormattedText htmlText="{chat>text}" class="modernMessageText modernAssistantText"/>
                                        <HBox justifyContent="SpaceBetween" alignItems="Center" class="modernMessageFooter">
                                            <Text text="{chat>timestamp}" class="modernTimestamp modernAssistantTimestamp"/>
                                            <HBox class="modernMessageActions" visible="{= ${chat>text} !== 'Thinking...' }">
                                                <Button 
                                                    icon="sap-icon://copy" 
                                                    type="Transparent" 
                                                    tooltip="Kopieren"
                                                    press="onCopyMessage"
                                                    class="modernActionButton"
                                                    ariaLabel="Nachricht kopieren"/>
                                                <Button 
                                                    icon="sap-icon://thumb-up" 
                                                    type="Transparent" 
                                                    tooltip="Gefällt mir"
                                                    class="modernActionButton"
                                                    ariaLabel="Positive Bewertung"/>
                                                <Button 
                                                    icon="sap-icon://thumb-down" 
                                                    type="Transparent" 
                                                    tooltip="Gefällt mir nicht"
                                                    class="modernActionButton"
                                                    ariaLabel="Negative Bewertung"/>
                                            </HBox>
                                        </HBox>
                                    </VBox>
                                </HBox>
                            </VBox>
                            
                            <!-- System Message -->
                            <VBox visible="{= ${chat>type} === 'system' }" class="modernSystemMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <VBox class="modernSystemMessage">
                                        <Text text="{chat>text}" class="modernSystemText"/>
                                    </VBox>
                                </HBox>
                            </VBox>
                            
                            <!-- Info Message -->
                            <VBox visible="{= ${chat>type} === 'info' }" class="modernInfoMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <HBox class="modernInfoMessage" alignItems="Center">
                                        <core:Icon src="sap-icon://information" class="modernInfoIcon"/>
                                        <Text text="{chat>text}" class="modernInfoText"/>
                                    </HBox>
                                </HBox>
                            </VBox>
                            
                            <!-- Warning Message -->
                            <VBox visible="{= ${chat>type} === 'warning' }" class="modernWarningMessageContainer">
                                <HBox justifyContent="Center" class="modernMessageRow">
                                    <HBox class="modernWarningMessage" alignItems="Center">
                                        <core:Icon src="sap-icon://warning" class="modernWarningIcon"/>
                                        <Text text="{chat>text}" class="modernWarningText"/>
                                    </HBox>
                                </HBox>
                            </VBox>
                        </content>
                    </CustomListItem>
                </List>
                
                <!-- Typing Indicator -->
                <HBox 
                    visible="{chat>/isTyping}" 
                    justifyContent="Start" 
                    class="modernTypingContainer modernMessageRow">
                    <Avatar 
                        src="" 
                        initials="AI" 
                        displaySize="XS" 
                        backgroundColor="Accent1"
                        class="modernAssistantAvatar"/>
                    <VBox class="modernTypingMessage">
                        <HBox alignItems="Center">
                            <VBox class="modernTypingIndicator">
                                <core:Icon src="" class="modernTypingDot modernTypingDot1"/>
                                <core:Icon src="" class="modernTypingDot modernTypingDot2"/>
                                <core:Icon src="" class="modernTypingDot modernTypingDot3"/>
                            </VBox>
                            <Text text="AI Assistant schreibt..." class="modernTypingText"/>
                        </HBox>
                    </VBox>
                </HBox>
            </VBox>
        </ScrollContainer>

        <!-- Simple Input Area -->
        <VBox class="modernInputContainer">
            <!-- Input Row -->
            <HBox class="modernInputRow" alignItems="End">
                <VBox class="modernInputWrapper" width="100%">
                    <TextArea
                        id="chatInputField"
                        value="{chat>/userInput}"
                        placeholder="Nachricht an SAP AI Assistant..."
                        rows="3"
                        maxLength="4000"
                        width="100%"
                        growing="true"
                        growingMaxLines="6"
                        submit="onSendChatMessageInSidePanel"
                        class=""
                        ariaLabel="Chat Eingabe"/>
                </VBox>
                
                <Button
                    id="sendButton"
                    icon="sap-icon://paper-plane"
                    type="Transparent"
                    press="onSendChatMessageInSidePanel"
                    class=""
                    ariaLabel="Nachricht senden"/>
            </HBox>
            
            <!-- Minimaler Input Footer -->
            <HBox justifyContent="End" alignItems="Center" class="modernInputFooter">
                <Text text="{= ${chat>/userInput}.length}/4000" class="modernCharCounter" visible="{= ${chat>/userInput}.length > 3800 }"/>
                <Text text="{chat>/statusMessage}" class="modernStatusMessage"/>
            </HBox>
        </VBox>
    </VBox>
</core:FragmentDefinition>
</file>

<file path="app/webapp/main.js">
sap.ui.define([
    "sap/ui/core/Component",
    "sap/ui/core/ComponentContainer",
    "sap/ui/layout/DynamicSideContent",
    "sap/ui/core/Fragment",
    "sap/ui/model/json/JSONModel",
    "sap/m/App",
    "sap/m/Page",
    "sap/m/Bar",
    "sap/m/Title",
    "sap/m/MessageToast"
], (Component, ComponentContainer, DynamicSideContent, Fragment, JSONModel, App, Page, Bar, Title, MessageToast) => {
    "use strict";

    // Modern class-based approach for Chat functionality
    class ChatManager {
        constructor() {
            this.chatModel = null;
            this.dynamicSideContent = null;
            this.feAppComponentInstance = null;
            this.currentRecognition = null;
            this.serviceUrl = "/service/stammtisch"; // Service URL from manifest.json
        }

        // Initialize chat model with welcome message
        initializeChatModel() {
            this.chatModel = new JSONModel({
                chatHistory: [],
                userInput: "",
                isTyping: false,
                statusMessage: ""
            });

            const welcomeHistory = [{
                type: "system",
                text: "👋 Welcome! I'm your AI assistant. I can help you with questions, tasks, and provide information. What would you like to know?",
                timestamp: this.getCurrentTimestamp()
            }];

            this.chatModel.setProperty("/chatHistory", welcomeHistory);
        }

        // Get current timestamp in HH:MM format
        getCurrentTimestamp() {
            return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Smooth scroll to bottom of chat
        scrollToBottom() {
            if (!this.dynamicSideContent) return;

            const scrollContainer = sap.ui.core.Fragment.byId(
                "chatSidePanelFragmentGlobal",
                "chatHistoryScrollContainerInSidePanel"
            );

            if (scrollContainer) {
                setTimeout(() => scrollContainer.scrollTo(0, 99999, 300), 100);
            }
        }

        async callLLMViaOperationBinding(prompt) {
            try {
                if (!this.feAppComponentInstance) {
                    throw new Error("FE Component not available");
                }

                const oDataModel = this.feAppComponentInstance.getModel();

                if (!oDataModel) {
                    throw new Error("OData Model not found");
                }

                // Erstelle Operation Binding für unbound Action
                const oOperationBinding = oDataModel.bindContext("/callLLM(...)");

                // Setze Parameter
                oOperationBinding.setParameter("prompt", prompt);

                // Führe Action aus
                await oOperationBinding.execute();

                // Hole Ergebnis
                const oContext = oOperationBinding.getBoundContext();
                const result = oContext.getObject();

                console.log("Claude operation result:", result);

                return result.response || "No response received";

            } catch (error) {
                console.error("Error in callLLMViaOperationBinding:", error);
                throw error;
            }
        }

        // Update status message with auto-clear
        setStatusMessage(message, duration = 3000) {
            this.chatModel.setProperty("/statusMessage", message);
            if (duration > 0) {
                setTimeout(() => this.chatModel.setProperty("/statusMessage", ""), duration);
            }
        }

        // Add message to chat history
        addMessage(type, text, timestamp = this.getCurrentTimestamp()) {
            const history = this.chatModel.getProperty("/chatHistory");
            history.push({ type, text, timestamp });
            this.chatModel.setProperty("/chatHistory", history);
            this.chatModel.refresh(true);
            this.scrollToBottom();
        }

        // Remove last "Thinking..." message
        removeThinkingMessage() {
            const history = this.chatModel.getProperty("/chatHistory");
            if (history.length > 0 && history[history.length - 1].text === "Thinking...") {
                history.pop();
                this.chatModel.setProperty("/chatHistory", history);
            }
        }

        // Handle AI response
        handleAIResponse(responseText) {
            this.removeThinkingMessage();
            this.addMessage("assistant", responseText);
            this.chatModel.setProperty("/isTyping", false);
            this.chatModel.setProperty("/statusMessage", "");
        }

        // Handle AI errors
        handleAIError(errorMessage) {
            this.removeThinkingMessage();
            this.addMessage("assistant", `I apologize, but I encountered an error: ${errorMessage}`);
            this.chatModel.setProperty("/isTyping", false);
            this.setStatusMessage("Error occurred", 5000);
        }

        // Call Claude service via HTTP
        async callLLMService(prompt) {
            try {
                // Get CSRF token first
                const csrfToken = await this.getCSRFToken();

                // Prepare the request
                const requestOptions = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({
                        prompt: prompt
                    })
                };

                // Make the actual call to Claude service
                const response = await fetch(`${this.serviceUrl}/callLLM`, requestOptions);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                // Handle response from Claude
                if (data && data.response) {
                    return data.response;
                } else {
                    throw new Error("No valid response from Claude service");
                }

            } catch (error) {
                console.error("Error calling Claude service:", error);
                throw error;
            }
        }

        // Get CSRF token for OData service calls
        async getCSRFToken() {
            try {
                const response = await fetch(`${this.serviceUrl}/`, {
                    method: 'GET',
                    headers: {
                        'X-CSRF-Token': 'Fetch'
                    }
                });

                return response.headers.get('X-CSRF-Token') || '';
            } catch (error) {
                console.warn("Could not fetch CSRF token:", error);
                return '';
            }
        }

        // Modern clipboard copy with fallback
        async copyToClipboard(text) {
            try {
                if (navigator.clipboard?.writeText) {
                    await navigator.clipboard.writeText(text);
                    this.setStatusMessage("Copied to clipboard", 2000);
                } else {
                    // Fallback for older browsers
                    const textArea = document.createElement("textarea");
                    textArea.value = text;
                    textArea.style.position = "fixed";
                    textArea.style.opacity = "0";
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    this.setStatusMessage("Copied to clipboard", 2000);
                }
            } catch (error) {
                console.error('Copy failed:', error);
                this.setStatusMessage("Failed to copy", 2000);
            }
        }

        // Modern speech recognition
        startVoiceInput() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

            if (!SpeechRecognition) {
                this.setStatusMessage("Voice input not supported in this browser");
                return;
            }

            // Stop any existing recognition
            if (this.currentRecognition) {
                this.currentRecognition.stop();
            }

            this.currentRecognition = new SpeechRecognition();
            Object.assign(this.currentRecognition, {
                continuous: false,
                interimResults: false,
                lang: 'en-US'
            });

            this.setStatusMessage("Listening...", 0);

            this.currentRecognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                this.chatModel.setProperty("/userInput", transcript);
                this.setStatusMessage("Voice input received", 2000);
            };

            this.currentRecognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                this.setStatusMessage("Voice input failed");
            };

            this.currentRecognition.onend = () => {
                this.currentRecognition = null;
                this.setStatusMessage("");
            };

            this.currentRecognition.start();
        }

        scrollToBottomEnhanced() {
            if (!this.dynamicSideContent) return;

            const scrollContainer = sap.ui.core.Fragment.byId(
                "chatSidePanelFragmentGlobal",
                "chatHistoryScrollContainerInSidePanel"
            );

            if (scrollContainer) {
                // Warte bis HTML-Content gerendert ist
                setTimeout(() => {
                    scrollContainer.scrollTo(0, 99999, 500);

                    // Trigger re-rendering für FormattedText mit HTML
                    const chatList = sap.ui.core.Fragment.byId(
                        "chatSidePanelFragmentGlobal",
                        "chatMessagesList"
                    );
                    if (chatList) {
                        chatList.getModel("chat").refresh(true);
                    }
                }, 150);
            }
        }

        // Erweiterte addMessage Methode mit HTML-Unterstützung
        addMessageEnhanced(type, text, timestamp = this.getCurrentTimestamp()) {
            const history = this.chatModel.getProperty("/chatHistory");

            // Spezielle Behandlung für HTML-Content
            let processedText = text;
            if (type === "assistant" && text.includes('<')) {
                // HTML-Content erkannt - stelle sicher, dass es sicher ist
                processedText = this.sanitizeHTMLContent(text);
            }

            history.push({
                type,
                text: processedText,
                timestamp,
                isHTML: text.includes('<') // Flag für HTML-Content
            });

            this.chatModel.setProperty("/chatHistory", history);
            this.chatModel.refresh(true);

            // Verwende enhanced scrolling für HTML-Content
            this.scrollToBottomEnhanced();
        }

        // HTML Content Sanitization (Basis-Sicherheit)
        sanitizeHTMLContent(html) {
            // Erlaubte Tags für AI-Antworten
            const allowedTags = [
                'p', 'br', 'strong', 'em', 'code', 'pre',
                'h1', 'h2', 'h3', 'ul', 'ol', 'li',
                'div', 'span', 'a'
            ];

            // Entferne potentiell gefährliche Attribute
            let sanitized = html.replace(/on\w+="[^"]*"/gi, ''); // onclick, onload, etc.
            sanitized = sanitized.replace(/javascript:/gi, ''); // javascript: URLs
            sanitized = sanitized.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ''); // script tags

            return sanitized;
        }

        // Link-Handler für AI-Links
        handleAILink(event) {
            const link = event.getSource();
            const url = link.data("url");

            if (url) {
                sap.m.MessageBox.confirm(
                    `Möchten Sie diesen Link öffnen?\n\n${url}`,
                    {
                        title: "Externen Link öffnen",
                        onClose: (action) => {
                            if (action === sap.m.MessageBox.Action.OK) {
                                window.open(url, '_blank', 'noopener,noreferrer');
                            }
                        }
                    }
                );
            }
        }
    }


    // Create singleton instance
    const chatManager = new ChatManager();

    // Modern Chat Controller with arrow functions
    const chatController = {
        async onSendChatMessageInSidePanel() {
            const userInput = chatManager.chatModel.getProperty("/userInput")?.trim();

            if (!userInput) {
                chatManager.setStatusMessage("Please enter a message.");
                return;
            }

            // Add user message
            chatManager.addMessage("user", userInput);

            // Clear input and set loading state
            chatManager.chatModel.setProperty("/userInput", "");
            chatManager.chatModel.setProperty("/isTyping", true);
            chatManager.setStatusMessage("Sending...", 0);

            // Add thinking placeholder

            try {
                // Call Claude service directly
                const aiResponse = await chatManager.callLLMViaOperationBinding(userInput);

                // Handle successful response
                chatManager.handleAIResponse(aiResponse);
                chatManager.setStatusMessage("Response received", 2000);

            } catch (error) {
                console.error("Claude service call failed:", error);
                chatManager.handleAIError(error.message || "Failed to get response from AI service");
            }
        },


        onClearChatHistory() {
            sap.m.MessageBox.confirm(
                "Start a new chat? This will clear your current conversation.",
                {
                    title: "New Chat",
                    onClose: (action) => {
                        if (action === sap.m.MessageBox.Action.OK) {
                            // Reset chat state
                            Object.assign(chatManager.chatModel.getData(), {
                                chatHistory: [],
                                userInput: "",
                                isTyping: false,
                                statusMessage: "New chat started"
                            });

                            // Add welcome message
                            chatManager.addMessage(
                                "system",
                                "New conversation started. How can I help you today?"
                            );

                            chatManager.setStatusMessage("New chat started");
                        }
                    }
                }
            );
        },

        async onCopyMessage(event) {
            const context = event.getSource().getBindingContext("chat");
            const messageText = context.getProperty("text");
            await chatManager.copyToClipboard(messageText);
        },

        onAttachFile() {
            // Placeholder for future file upload functionality
            chatManager.setStatusMessage("File attachment coming soon...");
        },

        onVoiceInput() {
            chatManager.startVoiceInput();
        },

        // Code-Block Kopier-Funktion
        async onCopyCodeBlock(event) {
            const button = event.getSource();
            const codeBlock = button.getParent().getParent(); // Navigation zum Code-Block
            const codeContent = codeBlock.querySelector('.ai-code-content');

            if (codeContent) {
                const code = codeContent.textContent;
                await chatManager.copyToClipboard(code);
                button.setText("Kopiert!");
                setTimeout(() => button.setText("Kopieren"), 2000);
            }
        },

        // Erweiterte Nachrichtenbehandlung
        onSendChatMessageInSidePanelEnhanced: async function () {
            const userInput = chatManager.chatModel.getProperty("/userInput")?.trim();

            if (!userInput) {
                chatManager.setStatusMessage("Bitte geben Sie eine Nachricht ein.");
                return;
            }

            // Add user message mit enhanced method
            chatManager.addMessageEnhanced("user", userInput);

            // Clear input and set loading state
            chatManager.chatModel.setProperty("/userInput", "");
            chatManager.chatModel.setProperty("/isTyping", true);
            chatManager.setStatusMessage("AI denkt nach...", 0);

            try {
                // Call Claude service
                const aiResponse = await chatManager.callLLMViaOperationBinding(userInput);

                // Handle successful HTML response
                chatManager.handleAIResponseEnhanced(aiResponse);
                chatManager.setStatusMessage("Antwort erhalten", 2000);

            } catch (error) {
                console.error("Claude service call failed:", error);
                chatManager.handleAIError(error.message || "Fehler beim Abrufen der AI-Antwort");
            }
        },

        // Erweiterte AI Response Handler
        handleAIResponseEnhanced(responseText) {
            this.removeThinkingMessage();

            // Verwende enhanced addMessage für HTML-Content
            this.addMessageEnhanced("assistant", responseText);

            this.chatModel.setProperty("/isTyping", false);
            this.chatModel.setProperty("/statusMessage", "");

            // Zusätzliche UI-Updates für HTML-Content
            this.enhanceRenderedHTMLContent();
        },

        // Post-Processing für gerenderten HTML-Content
        enhanceRenderedHTMLContent() {
            setTimeout(() => {
                // Füge Event-Listener für AI-Links hinzu
                const aiLinks = document.querySelectorAll('.ai-link');
                aiLinks.forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const url = link.getAttribute('data-url');
                        if (url) {
                            sap.m.MessageBox.confirm(
                                `Möchten Sie diesen Link öffnen?\n\n${url}`,
                                {
                                    title: "Externen Link öffnen",
                                    onClose: (action) => {
                                        if (action === sap.m.MessageBox.Action.OK) {
                                            window.open(url, '_blank', 'noopener,noreferrer');
                                        }
                                    }
                                }
                            );
                        }
                    });
                });

                // Füge Kopieren-Buttons zu Code-Blöcken hinzu
                const codeBlocks = document.querySelectorAll('.ai-code-block');
                codeBlocks.forEach(block => {
                    if (!block.querySelector('.ai-copy-button')) {
                        const copyButton = document.createElement('button');
                        copyButton.className = 'ai-copy-button';
                        copyButton.innerHTML = '📋 Kopieren';
                        copyButton.onclick = async () => {
                            const code = block.querySelector('.ai-code-content').textContent;
                            await chatManager.copyToClipboard(code);
                            copyButton.innerHTML = '✅ Kopiert!';
                            setTimeout(() => copyButton.innerHTML = '📋 Kopieren', 2000);
                        };

                        const header = block.querySelector('.ai-code-header');
                        if (header) {
                            header.appendChild(copyButton);
                        }
                    }
                });
            }, 100);
        }


    };

    // Enhanced global functions
    const globalFunctions = {
        addAIResponse: (responseText) => chatManager.handleAIResponse(responseText),
        addSystemMessage: (message) => chatManager.addMessage("system", message),
        handleAIError: (errorMessage) => chatManager.handleAIError(errorMessage),
        triggerChatScroll: () => chatManager.scrollToBottom()
    };

    // Assign to window for external access
    Object.assign(window, globalFunctions);

    // Modern keyboard shortcuts with better event handling
    const setupKeyboardShortcuts = () => {
        document.addEventListener('keydown', (event) => {
            const { ctrlKey, metaKey, key } = event;
            const inputField = sap.ui.core.Fragment.byId("chatSidePanelFragmentGlobal", "chatInputField");
            const isInputFocused = inputField?.getFocusDomRef() === document.activeElement;

            if (!isInputFocused) return;

            // Ctrl/Cmd + Enter to send message
            if ((ctrlKey || metaKey) && key === 'Enter') {
                event.preventDefault();
                chatController.onSendChatMessageInSidePanel();
            }

            // Escape to clear input
            if (key === 'Escape') {
                chatManager.chatModel.setProperty("/userInput", "");
            }
        });
    };

    // Modern app initialization with async/await
    const initializeApp = async () => {
        try {
            // Initialize chat model
            chatManager.initializeChatModel();

            // Create DynamicSideContent
            chatManager.dynamicSideContent = new DynamicSideContent("appDynamicSideContentGlobal", {
                sideContentVisible: false,
                height: "100%"
            });
            chatManager.dynamicSideContent.setModel(chatManager.chatModel, "chat");

            // Load chat fragment
            const chatPanelContent = await Fragment.load({
                id: "chatSidePanelFragmentGlobal",
                name: "sap.stammtisch.ui.app.ext.ChatSidePanelContent",
                controller: chatController
            });
            chatManager.dynamicSideContent.addSideContent(chatPanelContent);

            // Create Fiori Elements component
            const feComponent = await Component.create({
                name: "sap.stammtisch.ui.app",
                id: "feAppComponentCore"
            });

            chatManager.feAppComponentInstance = feComponent;

            // Set external dependencies if available
            if (feComponent.setExternalDependencies) {
                feComponent.setExternalDependencies(
                    chatManager.chatModel,
                    chatManager.dynamicSideContent
                );
            } else {
                console.warn(
                    "Method 'setExternalDependencies' not found on FE Component. " +
                    "Chat/SidePanel might not be fully functional from custom actions."
                );
            }

            // Create component container and app structure
            const componentContainer = new ComponentContainer({
                component: feComponent,
                height: "100%"
            });
            chatManager.dynamicSideContent.addMainContent(componentContainer);

            const mainPage = new Page("mainAppPage", {
                showHeader: false,
                content: [chatManager.dynamicSideContent],
                height: "100%"
            });

            const appControl = new App({
                pages: [mainPage],
                height: "100%"
            });

            // Mount app
            appControl.placeAt("appHost");

            // Setup keyboard shortcuts
            setupKeyboardShortcuts();

            console.log("Application initialized successfully");

        } catch (error) {
            console.error("Failed to initialize application:", error);

            const appHostDiv = document.getElementById("appHost");
            if (appHostDiv) {
                appHostDiv.innerHTML = `
                    <div style="padding: 20px; color: #d32f2f; font-family: Arial, sans-serif;">
                        <h2>Application Error</h2>
                        <p><strong>Error:</strong> ${error.message}</p>
                        <p>Please check the console for more details.</p>
                    </div>
                `;
            }
        }
    };



    // Initialize when SAP UI5 core is ready
    sap.ui.getCore().attachInit(initializeApp);
});
</file>

<file path="srv/service.cds">
using { sap.stammtisch as StammtischModel } from '../db/schema';
using from '../app/annotations'; 

service StammtischService @(path: '/service/stammtisch') { 

    @odata.draft.enabled // Aktiviere Draft-Modus für diese Entität
    entity Stammtische    as projection on StammtischModel.Stammtische;

    entity Praesentatoren as projection on StammtischModel.Praesentatoren;
    entity Teilnehmer     as projection on StammtischModel.Teilnehmer;

    action callLLM (prompt: String) returns { response: String };

}
</file>

<file path="package.json">
{
  "name": "StammtischAI",
  "version": "1.0.0",
  "description": "A simple CAP project.",
  "repository": "<Add your repository here>",
  "license": "ISC",
  "dependencies": {
    "@cap-js/postgres": "^1",
    "@sap-ai-sdk/orchestration": "^1.13.0",
    "@sap-cloud-sdk/connectivity": "^4.0.2",
    "@sap-cloud-sdk/http-client": "^4.0.2",
    "@sap-cloud-sdk/resilience": "^4.0.2",
    "@sap/cds": "^8.9.4",
    "cds-pg": "^0.1.36",
    "express": "^4",
    "pg": "^8"
  },
  "devDependencies": {
    "@cap-js/cds-typer": "^0.34.0",
    "@cap-js/cds-types": "^0.10.0",
    "@cap-js/sqlite": "^1"
  },
  "scripts": {
    "start": "cds-serve",
    "watch-app": "cds watch --open app/webapp/index.html?sap-ui-xx-viewCache=false"
  },
  "cds": {
    "requires": {
      "db": {
        "kind": "postgres",
        "impl": "@cap-js/postgres",
        "[development]": {
          "credentials": {
            "host": "localhost",
            "port": 5433,
            "database": "stammtisch_ai_db",
            "user": "duh",
            "password": "test123"
          }
        },
        "[hybrid]": {
          "kind": "postgres",
          "credentials": {
            "host": "localhost",
            "port": 5433,
            "database": "stammtisch_ai_db",
            "user": "duh",
            "password": "test123"
          }
        }
      },
      "auth": {
        "kind": "mocked"
      },
      "destinations": true,
      "gen-ai-hub": {
        "claude-3.5": {
          "destinationName": "GenAIHubDestination",
          "deploymentUrl": "/v2/inference/deployments/dfddf56cb9d349b0",
          "resourceGroup": "default",
          "apiVersion": "2024-08-06",
          "modelName": "anthropic--claude-3.5-sonnet"
        }
      },
      "GenAIHubDestination": {
        "kind": "rest",
        "credentials": {
          "destination": "aicore-destination",
          "requestTimeout": "300000"
        }
      }
    },
    "features": {
      "fetch_csrf": true
    }
  },
  "sapux": [
    "app"
  ]
}
</file>

<file path="srv/service.js">
const cds = require('@sap/cds');
// Import des Enhanced AI Agent
const EnhancedAIAgent = require('./agents/enhanced-agent');

function logDbConfig() {
  if (cds.db) {
    console.log("========== EFFECTIVE DB CONFIG ==========");
    console.log("CDS Profiles:", cds.env.profiles);
    console.log("DB Service Kind:", cds.db.kind);
    console.log("=========================================");
  }
}

if (cds.db) {
  logDbConfig();
} else {
  cds.once('connected', (service) => {
    if (service.name === 'db') {
      logDbConfig();
    }
  });
}

module.exports = cds.service.impl(async function () {

  // Initialize Enhanced AI Agent
  const enhancedAgent = new EnhancedAIAgent();

  this.on('READ', 'Stammtische', async (req, next) => {
    console.log("----- Reading Stammtische -----");
    try {
      const result = await next();
      console.log("----- Stammtische read successfully -----");
      return result;
    } catch (error) {
      console.error("----- Error reading Stammtische -----", error);
      throw error;
    }
  });

  /**
   * Enhanced AI Assistant mit Multi-Pattern Support
   */
  this.on('callLLM', async (req) => {
    try {
      const { prompt } = req.data;
      
      if (!prompt) {
        req.error(400, 'Prompt is required');
        return;
      }

      console.log('=== ENHANCED AI AGENT REQUEST ===');
      console.log('User Prompt:', prompt);
      
      // Verwende den Enhanced AI Agent für die Verarbeitung
      const response = await enhancedAgent.processRequest(prompt);
      
      console.log('=== ENHANCED AI AGENT RESPONSE ===');
      console.log('Response Length:', response.length);
      
      // Performance Stats für Monitoring
      const stats = enhancedAgent.getPerformanceStats();
      console.log('Agent Performance Stats:', stats);

      return { response };

    } catch (error) {
      console.error('=== ENHANCED AI AGENT ERROR ===');
      console.error('Error:', error.message);
      
      const userFriendlyError = this.createUserFriendlyErrorMessage(error);
      return { response: userFriendlyError };
    }
  });

  /**
   * Agent Performance Analytics Endpoint (optional)
   */
  this.on('getAgentStats', async (req) => {
    try {
      const stats = enhancedAgent.getPerformanceStats();
      return { stats };
    } catch (error) {
      console.error('Error getting agent stats:', error);
      return { error: error.message };
    }
  });

  /**
   * Benutzerfreundliche Fehlermeldungen
   */
  this.createUserFriendlyErrorMessage = function(error) {
    if (error.message?.includes('timeout')) {
      return `⏱️ **Zeitüberschreitung**: Die AI-Verarbeitung dauerte zu lange.

**Versuchen Sie:**
- Eine kürzere, spezifischere Frage zu stellen
- Es in einem Moment erneut zu versuchen`;
    }

    if (error.message?.includes('database') || error.message?.includes('DB')) {
      return `🗄️ **Datenbankfehler**: Problem beim Zugriff auf die Daten.

**Lösungsansätze:**
- Versuchen Sie es in einem Moment erneut
- Kontaktieren Sie den Administrator bei anhaltenden Problemen`;
    }

    if (error.message?.includes('classification') || error.message?.includes('orchestration')) {
      return `🤖 **AI-Verarbeitungsfehler**: Der Agent konnte Ihre Anfrage nicht vollständig verarbeiten.

**Alternative:**
- Formulieren Sie Ihre Frage anders
- Versuchen Sie eine einfachere Anfrage
- Beispiel: "Zeige mir alle Stammtische" oder "Suche nach CAP"`;
    }

    return `❌ **Unerwarteter Fehler**

Der AI-Agent ist temporär nicht verfügbar. Bitte versuchen Sie es später erneut.

**Ihre Anfrage kann möglicherweise auch direkt in der Anwendung bearbeitet werden.**`;
  };

});
</file>

</files>
